<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单项链表</title>
      <link href="/post/e72b5a3a.html"/>
      <url>/post/e72b5a3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="链表的介绍"><a href="#链表的介绍" class="headerlink" title="链表的介绍"></a>链表的介绍</h2><blockquote><p>链表在内存中的存储<br><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200617221622.png" alt="img"></p><p><strong>特点</strong></p><ul><li>链表是以节点的方式来存储,<strong>是链式存储</strong></li><li>每个节点包含 data 域 和 next 域。next域用来指向下一个节点</li><li>链表的各个节点不一定是连续存储的</li><li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li></ul><p>带头结点的单列表<strong>逻辑示意图</strong></p><p><img src="https://img-blog.csdn.net/20160928205306919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p></blockquote><h2 id="单向链表的优缺点"><a href="#单向链表的优缺点" class="headerlink" title="单向链表的优缺点"></a>单向链表的优缺点</h2><blockquote><p> 和普通的线性结构（如数组）相比，链表结构有以下特点：<br>    （1）单个结点创建非常灵活，普通的线性内存通常在创建的时候就需要设定数据的大小<br>    （2）结点的删除、插入非常方便，不需要像线性结构那样移动剩下的数据<br>    （3）结点的访问方便，可以通过循环或者递归的方法访问到任意数据，但是平均的访问效率低于线性表</p></blockquote><h2 id="实现思路-实现链表的增删改查"><a href="#实现思路-实现链表的增删改查" class="headerlink" title="实现思路(实现链表的增删改查)"></a>实现思路(实现链表的增删改查)</h2><blockquote><p>我们可以想象链表就是一个英雄池,英雄池里面有很多的英雄串一块</p><p>因此我们将定义一个HeroNode类为节点类,SingleLinkedList为英雄池</p><ol><li>首先定义<strong>HeroNode</strong>,每个HeroNode就是一个节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> no;<span class="comment">//节点编号</span></span><br><span class="line">   <span class="keyword">public</span> String name;<span class="comment">//节点名称</span></span><br><span class="line">   <span class="keyword">public</span> String nickname;<span class="comment">//节点昵称</span></span><br><span class="line">   <span class="keyword">public</span> HeroNode next;   <span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickname)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.no = no;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">       <span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//为了显示方便,重写ToString</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> + <span class="string">&quot;no=&quot;</span> + no + <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol><li>创建SingleLinkedList类,来管理我们的英雄</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;</span><br><span class="line">   <span class="comment">//先初始化一个头节点,头节点不能动,不存放具体的数据</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//无序插入节点</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 思路:</span></span><br><span class="line"><span class="comment">    *   当不考虑编号的顺序时,找到当前列表的最后节点,将最后一个节点的next 指向 新的节点</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">       <span class="comment">//因为head节点不能动,因此我们需要一个辅助变量来遍历 temp</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="comment">//遍历链表,找到最后</span></span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果没有找到最后,就将temp后移</span></span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//当退出while循环时,temp就指向了链表的最后</span></span><br><span class="line">       <span class="comment">//将最后这个节点的next 指向 新的节点</span></span><br><span class="line">       temp.next = heroNode;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//有序插入节点</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   思路:</span></span><br><span class="line"><span class="comment">   怎么有序?</span></span><br><span class="line"><span class="comment">   假如有如下编号节点</span></span><br><span class="line"><span class="comment">   1 3 4 5 6</span></span><br><span class="line"><span class="comment">   我要插入节点2,那么理想情况是编号从小到大排列:</span></span><br><span class="line"><span class="comment">   1 2 3 4 5 6</span></span><br><span class="line"><span class="comment">   那怎么插入到1 和 3 的中间?</span></span><br><span class="line"><span class="comment">   首先我们要知道1的前面是还有一个头节点的</span></span><br><span class="line"><span class="comment">   我们把头节点赋值给temp临时变量</span></span><br><span class="line"><span class="comment">   temp.next == 1这个节点,这个时候判断一下1节点的编号是否大于2节点的编号,结果是不大于,则位置没找到</span></span><br><span class="line"><span class="comment">   那么继续照,把temp的位置后移一位,temp = temp.next 也就是 开始的时候temp = head ,现在等于temp = head.next</span></span><br><span class="line"><span class="comment">   head.next就等于==1.所以temp = temp.next也就是temp往后移动了一位</span></span><br><span class="line"><span class="comment">       这个时候再来判断一下,temp.next.no &gt; 2节点的编号吗?,结果是大于</span></span><br><span class="line"><span class="comment">       此时的temp是1,那么1.next = 3,也就是temp.next == 3 3.no &gt; 2.no == 3 &gt; 2</span></span><br><span class="line"><span class="comment">       此时temp的位置就已经找到了,就是在temp的前面</span></span><br><span class="line"><span class="comment">       所以我们只要把temp.next的值改成 = 2 </span></span><br><span class="line"><span class="comment">       把2.next改成temp.next</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 因为头节点不能动,因此我们任然通过一个临时变量来帮助找到添加的位置</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;   <span class="comment">//flag表示添加的编号是否已经存在,默认为false</span></span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;    <span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (temp.next.no &gt; heroNode.no) &#123;   <span class="comment">//位置找到了,就在temp的后面插入</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == heroNode.no) &#123; <span class="comment">//说明添加的HeroNode的编号已经存在</span></span><br><span class="line">               flag = <span class="literal">true</span>;        <span class="comment">//说明编号已经存在</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           temp = temp.next;   <span class="comment">//后移,条件都不满足继续往后遍历</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断flag的值</span></span><br><span class="line">       <span class="keyword">if</span> (flag) &#123;   <span class="comment">//不能添加,说明编号存在</span></span><br><span class="line">           System.out.println(<span class="string">&quot;准备插入的编号已经存在了&quot;</span> + heroNode.no);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           heroNode.next = temp.next;</span><br><span class="line">           temp.next = heroNode;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改节点,根据no编号来修改,即no编号不能改</span></span><br><span class="line">   <span class="comment">//根据newHeroNode的no来修改即可</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">       <span class="comment">//判断链表是否为空</span></span><br><span class="line">       <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;链表为空!~~&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//找到需要修改节点,根据no编号</span></span><br><span class="line">       <span class="comment">//定义一个辅助变量</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;   <span class="comment">//表示是否找到</span></span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;  <span class="comment">//已经遍历到最后一个了,</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (temp.no == heroNode.no) &#123;</span><br><span class="line">               <span class="comment">//找到</span></span><br><span class="line">               flag = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//根据flag 判断是否找到要修改的节点</span></span><br><span class="line">       <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">           temp.name = heroNode.name;</span><br><span class="line">           temp.nickname = heroNode.nickname;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;<span class="comment">//没有找到</span></span><br><span class="line">           System.out.println(<span class="string">&quot;没有找到~~~~&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//删除节点</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">       <span class="comment">//判断列表是否为空</span></span><br><span class="line">       <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;列表为空~~&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;      <span class="comment">//没找到,已经遍历到最后一个元素了</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (temp.next.no == no) &#123;</span><br><span class="line">               <span class="comment">//找到了</span></span><br><span class="line">               flag = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">           temp.next = temp.next.next;</span><br><span class="line">           System.out.println(<span class="string">&quot;删除后的链表&quot;</span>);</span><br><span class="line">           list();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;没有找到要删除的节点&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//显示链表所有节点</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;链表为空~~~&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//因为头节点不能动,因此我们需要一个辅助变量来遍历</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="comment">//判断是否到最后</span></span><br><span class="line">           <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//输出节点信息</span></span><br><span class="line">           System.out.println(temp);</span><br><span class="line">           <span class="comment">//将temp后移</span></span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><ol><li>编写测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//进行测试.先创建节点</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;松江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;SerMs&quot;</span>, <span class="string">&quot;Ms&quot;</span>);</span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;鸣沙&quot;</span>, <span class="string">&quot;鸣哨&quot;</span>);</span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建列表</span></span><br><span class="line">       <span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line">       <span class="comment">//加入数据(无序)</span></span><br><span class="line">       <span class="comment">//        singleLinkedList.add(hero1);</span></span><br><span class="line">       <span class="comment">//        singleLinkedList.add(hero2);</span></span><br><span class="line">       <span class="comment">//        singleLinkedList.add(hero3);</span></span><br><span class="line">       <span class="comment">//        singleLinkedList.add(hero4);</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//有序插入节点,并去重</span></span><br><span class="line">       singleLinkedList.addByOrder(hero4);</span><br><span class="line">       singleLinkedList.addByOrder(hero3);</span><br><span class="line">       singleLinkedList.addByOrder(hero1);</span><br><span class="line">       singleLinkedList.addByOrder(hero1);</span><br><span class="line">       singleLinkedList.addByOrder(hero2);</span><br><span class="line">       singleLinkedList.addByOrder(hero2);</span><br><span class="line">       <span class="comment">//显示</span></span><br><span class="line">       singleLinkedList.list();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//测试修改节点</span></span><br><span class="line">       <span class="type">HeroNode</span> <span class="variable">newHeroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;小林&quot;</span>, <span class="string">&quot;豹子头~~~~&quot;</span>);</span><br><span class="line">       singleLinkedList.update(newHeroNode);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//修改后的链表</span></span><br><span class="line">       System.out.println(<span class="string">&quot;修改后的链表&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//显示</span></span><br><span class="line">       singleLinkedList.list();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//测试删除节点</span></span><br><span class="line">       <span class="comment">//        HeroNode newHeroNode2 = new HeroNode(5, &quot;小林&quot;, &quot;豹子头~~~~&quot;);</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">       <span class="comment">//删除节点</span></span><br><span class="line">       singleLinkedList.delete(<span class="number">1</span>);</span><br><span class="line">       singleLinkedList.delete(<span class="number">2</span>);</span><br><span class="line">       singleLinkedList.delete(<span class="number">3</span>);</span><br><span class="line">       singleLinkedList.delete(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>测试成功~~~<br>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=39jvp4pqpw2ss">https://cloud.tencent.com/developer/support-plan?invite_code=39jvp4pqpw2ss</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 单项链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/post/b66774c1.html"/>
      <url>/post/b66774c1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>循环队列</strong>是 队列的一种特殊形式。首先介绍队列，然后引申出循环队列。<br>队列又称为“先进先出”<strong>FIFO</strong>线性表<br>限定插入操作只能在队尾进行，而删除操作只能在队首进行<br>队列也可以采用<strong>顺序存储结构或链表结构</strong>来实现，分别称为顺序队列和链队列</p><p><strong>队列的顺序表示—顺序队列</strong></p><p>用一组连续的<strong>存储单元</strong>依次存放从队首到队尾的元素，附设两个指针head和tail分别指向队首元素和队尾元素的位置，<br>(有的地方用front 和 rear 表示)</p><p><img src="./img/queue/SouthEast.png" alt="img"></p><p><strong>当head = tail = 0时表示空队列</strong></p><p><img src="./img/queue/01.png" alt="这里写图片描述"></p><p><strong>当插入新元素到队尾时，tail加1</strong></p><p><img src="./img/queue/02.png" alt="这里写图片描述"></p><p><strong>当删除队首元素时，head加1，上图如果把C也删掉，那么就 head = tail 了</strong></p><p><strong>tail 始终指向队列元素的下一个位置</strong></p><p>对应的操作：<br>队空：head=tail<br>求队长：tail - head<br>入队：新元素按 tail 指示位置加入，再将队尾指针加1 ，即 tail = tail + 1<br>出队：将head指示的元素取出，再将队头指针加1，即head = head + 1</p><p><img src="./img/queue/03.png" alt="这里写图片描述"></p><p><strong>下面引入循环队列</strong></p><p><img src="./img/queue/04.png" alt="这里写图片描述"></p><p><img src="./img/queue/05.png" alt="这里写图片描述"></p><p><strong>入队，tail指针变化：</strong><br><strong>tail＝ （tail＋1）％maxsize</strong></p><p><img src="./img/queue/06.png" alt="这里写图片描述"></p><p><strong>出队，head指针变化：</strong><br><strong>head＝（ head ＋1）％maxsize</strong></p><p>删除数据C，队列为空</p><p><img src="./img/queue/07.png" alt="这里写图片描述"></p><p>依次插入数据D,E,F,G,H,I,J,K<br>队列满：head = tail</p><p><img src="./img/queue/08.png" alt="这里写图片描述"></p><p>队满和队空时，均有head=tail<br>因此，只凭head=tail 还无法区分是满还是空。</p><p>如何判定队列满还是空？</p><p>方法1：<br>用一个计数变量来记载队列中的元素个数<br>初始化队列时c=0;<br>当入队时，计数变量＋1（ c=c+1 ）<br>当出队时，计数变量－1 （c=c-1）<br>当计数变量＝maxsize时，队满<br>当计数变量＝0时，队空</p><p>方法2：<br>牺牲一个元素空间，来区别队空或队满。<br>入队前，先判Q.rear+1是否等于Q.front，<br>若是则为队满。<br>而当Q.front=Q.rear时，为队空。<br>上图中：当数据J入队后，就认为队已满，<br>而当数据K再要入队时，就拒绝入队。</p><p>当队列已经满了，如果允许覆盖之前的数据：<br><img src="./img/queue/09.png" alt="这里写图片描述"></p><p>队列已经满了之后，<br>继续插入数据L,M,N，<br>之前的数据D,E,F被覆盖<br>此时，队列已经满了，<br>最新的数据是：G,H,I，J，K,L,M,N</p><p>在程序中，取队列的数据的时候，如果检测到 队列满了，<br>此时，需要一次性取出队列中的数据，一次性取出数据的时候，不用管head指针，直接按照tail指针指向的位置开始取数据，直到循环取到tail-1位置停止。最终取出的数据的个数是 队列的长度 maxsize<br>取出之后，可以对队列指针 head 和tail初始化为 0，需要将队列满整个标志设置为False.</p><p>当应该用场景如下的时候：</p><ol><li>数据是一条一条的进入队列的</li><li>队列中的数据是一次性读取的<br>一次性读取出队列中的所有数据的方式：<br>因为允许覆盖，有两种情况：<br>当队列满了之后，<br>需要根据tail,从tail所在位置的数据，绕一圈到tail-1位置所在的数据，都按照顺序取出来，这些数据是按照顺序，最新的数据。<br>当队列没有满的时候，<br>队列中所有的数据是 Head 到 tail之间的所有数据。</li></ol><p><strong>这里采用方式2来进行代码演示</strong></p><p>参考代码：</p><p>分析:</p><ol><li>当队列满时,条件是(rear + 1) % maxSize = front</li><li>队列为空的条件: rear == front</li><li>队列有效数据个数:(rear  + maxSize - front) % maxSize</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/3/20 18:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试数组模拟环形队列的案例~~~~~&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        <span class="type">CircleArray</span> <span class="variable">circleArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleArray</span>(<span class="number">4</span>); <span class="comment">//说明设置4.其队列的有效数据最大是3</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit): 推出队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>); <span class="comment">//接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        circleArray.showQueue();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    circleArray.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> circleArray.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是: %d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> circleArray.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头数据是:%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出队列~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleArray</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;  <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="comment">//front的初始值=0 也就是说arr[front]就是队列的第一个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;  <span class="comment">//队列头</span></span><br><span class="line">    <span class="comment">//rear的初始值=0 rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;   <span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr; <span class="comment">//该数组用于存放数据,模拟队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleArray</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">rear</span> <span class="operator">=</span>= front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列满,不能加入数据~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接将数据加入</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        <span class="comment">//将rear后移,必须考虑取模</span></span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列的数据,出队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,不能获取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分析出front是指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//1.先把front对应的值保存到临时变量</span></span><br><span class="line">        <span class="comment">//2.将front后移 考虑取模</span></span><br><span class="line">        <span class="comment">//3.将临时保存的变量返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示所有数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,不能获取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//思路:从front开始遍历,遍历多少个元素</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出当前队列有效数据的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列头数据,不是取出数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空,没有数据~~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 循环队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ1024</title>
      <link href="/post/9b97716e.html"/>
      <url>/post/9b97716e.html</url>
      
        <content type="html"><![CDATA[<p>ps:<code>算法打卡第一天</code></p><h2 id="金币"><a href="#金币" class="headerlink" title="金币"></a>金币</h2><blockquote><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 N 天每天收到 N 枚金币后，骑士会在之后的连续 N+1 天里，每天收到 N+1 枚金币。</p><p>请计算在前 K 天里，骑士一共获得了多少金币。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入只有 1 行，包含一个正整数 K，表示发放金币的天数。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出文件只有 1 行，包含一个正整数，即骑士收到的金币数。</p><p><img src="./img/oj/image-20220317235542863.png" alt=""></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>骑士收的金币数写成以下形式，更容易想到解题方法<br>以前10天（包括第10天）收到的金币数为例，则收到的金币数为：<br>1 （第一天）<br>2 2 （第二、三天）<br>3 3 3 （第四、五、六天）<br>4 4 4 4 （第七、八、九、十天）<br>若想打印上面的这个数字三角形的话，只需两个for循环即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">       System.out.println(i);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>类比这段代码，内层for循环可以代表天数，那只需修改循环终止的条件，当天数day==k时，终止循环即可。<br>该题解决代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> SerMs</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2022/3/17 23:15</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1024</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> sc.nextInt(), days = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">               days++;</span><br><span class="line">               sum += i;</span><br><span class="line">               <span class="keyword">if</span> (day==days)&#123;</span><br><span class="line">                   System.out.println(sum);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HNKJZYXY_OJ </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Aop详细介绍</title>
      <link href="/post/9dadefec.html"/>
      <url>/post/9dadefec.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a><strong>什么是AOP</strong></h2><blockquote><p>​     <a href="https://baike.baidu.com/item/AOP/1332219?fr=aladdin">AOP</a>（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>​    而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p></blockquote><hr><h2 id="一-AOP的基本概念"><a href="#一-AOP的基本概念" class="headerlink" title="一 AOP的基本概念"></a><strong>一 AOP的基本概念</strong></h2><blockquote><ul><li>(1)Aspect(切面):通常是一个类，里面可以定义切入点和通知</li><li>(2)JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用</li><li>(3)Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around</li><li>(4)Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式</li><li>(5)AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类</li></ul></blockquote><p><strong>通知方法:</strong></p><blockquote><ol><li>前置通知:在我们执行目标方法之前运行(<strong>@Before</strong>)</li><li>后置通知:在我们目标方法运行结束之后 ,不管有没有异常<strong><em>\</em>(@After)**</strong></li><li>返回通知:在我们的目标方法正常返回值后运行<strong><em>\</em>(@AfterReturning)**</strong></li><li>异常通知:在我们的目标方法出现异常后运行<strong><em>\</em>(@AfterThrowing)**</strong></li><li>环绕通知:动态代理, 需要手动执行joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知<strong>(@Around)</strong></li></ol></blockquote><h2 id="二-Spring-AOP"><a href="#二-Spring-AOP" class="headerlink" title="二 Spring AOP"></a><strong>二 Spring AOP</strong></h2><blockquote><p>​    Spring中的AOP代理还是离不开Spring的IOC容器，代理的生成，管理及其依赖关系都是由IOC容器负责，Spring默认使用JDK动态代理，在需要代理类而不是代理接口的时候，Spring会自动切换为使用CGLIB代理，不过现在的项目都是面向接口编程，所以JDK动态代理相对来说用的还是多一些。</p></blockquote><h2 id="三-基于注解的AOP配置方式"><a href="#三-基于注解的AOP配置方式" class="headerlink" title="三 基于注解的AOP配置方式"></a><strong>三 基于注解的AOP配置方式</strong></h2><p><strong>切面类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.aop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//日志切面类</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//什么这个类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspects</span> &#123;</span><br><span class="line">    <span class="comment">//@Pointcut声明切入点</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.enjoy.cap10.aop.Calculator.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@before代表在目标方法执行前切入, 并指定在哪个方法前切入</span></span><br><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logStart</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法运行....参数列表是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logEnd</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法结束......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logReturn</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除法正常返回......运行结果是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logException</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;运行异常......异常信息是:&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;@Arount:执行目标方法之前...&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();<span class="comment">//相当于开始调div地</span></span><br><span class="line">System.out.println(<span class="string">&quot;@Arount:执行目标方法之后...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目标方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.aop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="comment">//业务逻辑方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> i/j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.enjoy.cap10.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.enjoy.cap10.aop.Calculator;</span><br><span class="line"><span class="keyword">import</span> com.enjoy.cap10.aop.LogAspects;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cap10MainConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Calculator <span class="title function_">calculator</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LogAspects <span class="title function_">logAspects</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogAspects</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cap10Test</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Cap10MainConfig.class);</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> app.getBean(Calculator.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c.div(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">app.close();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Arount:执行目标方法之前...</span><br><span class="line">除法运行....参数列表是:&#123;&#125;</span><br><span class="line">--------</span><br><span class="line">@Arount:执行目标方法之后...</span><br><span class="line">除法结束......</span><br><span class="line">除法正常返回......运行结果是:&#123;&#125;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="AOP源码赏析-https-www-cnblogs-com-foreveravalon-p-8653832-html"><a href="#AOP源码赏析-https-www-cnblogs-com-foreveravalon-p-8653832-html" class="headerlink" title="[\AOP源码赏析*](https://www.cnblogs.com/foreveravalon/p/8653832.html)*"></a><strong>[\</strong>AOP源码赏析*<em>](<a href="https://www.cnblogs.com/foreveravalon/p/8653832.html)*">https://www.cnblogs.com/foreveravalon/p/8653832.html)*</a></em></h2><blockquote><p>在这个注解比较流行的年代里,当我们想要使用spring 的某些功能时只需要加上一行代码就可以了,比如:</p><ul><li>@EnableAspectJAutoProxy开启AOP</li><li>@EnableTransactionManagement开启spring事务管理,</li><li>@EnableCaching开启spring缓存</li><li>@EnableWebMvc 开启webMvc</li></ul><p>对于我们使用者而言十分简单便利,然而,其背后所做的事,却远远比一个注解复杂的多了,本篇只是简略的介绍一下@EnableAspectJAutoProxy背后所发生的那些事,了解其工作原理,才能更好的运用,并从中领略大师的智慧.</p></blockquote><p><strong>废话不多说,先来看一下源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class="line"><span class="comment">     * to standard Java interface-based proxies. The default is &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicate that the proxy should be exposed by the AOP framework as a &#123;<span class="doctag">@code</span> ThreadLocal&#125;</span></span><br><span class="line"><span class="comment">     * for retrieval via the &#123;<span class="doctag">@link</span> org.springframework.aop.framework.AopContext&#125; class.</span></span><br><span class="line"><span class="comment">     * Off by default, i.e. no guarantees that &#123;<span class="doctag">@code</span> AopContext&#125; access will work.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.3.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>英文注解已经很详细了,这里简单介绍一下两个参数,一个是控制aop的具体实现方式,为true 的话使用cglib,为false的话使用java的Proxy,默认为false,第二个参数控制代理的暴露方式,解决内部调用不能使用代理的场景，默认为false.</p><p>这里核心是@Import(AspectJAutoProxyRegistrar.class);在AspectJAutoProxyRegistrar里,核心的地方是</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br></pre></td></tr></table></figure><blockquote><p>一个AOP的工具类,这个工具类的主要作用是把AnnotationAwareAspectJAutoProxyCreator这个类定义为BeanDefinition放到spring容器中,这是通过实现ImportBeanDefinitionRegistrar接口来装载的,具体装载过程不是本篇的重点,这里就不赘述,我们重点看AnnotationAwareAspectJAutoProxyCreator这个类.</p><p>首先看看这个类图:</p><p><img src="https://img-blog.csdnimg.cn/20190415091218213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt=""></p><p> <strong>从类图是可以大致了解AnnotationAwareAspectJAutoProxyCreator这个类的功能.它实现了一系列Aware的接口,在Bean装载的时候获取BeanFactory(Bean容器),Bean的ClassLoader,还实现了order接口,继承了PorxyConfig,ProxyConfig中主要封装了代理的通用处理逻辑,比如设置目标类,设置使用cglib还是java proxy等一些基础配置.</strong></p><p> 而能够让这个类参与到bean初始化功能,并为bean添加代理功能的还是因为它实现了BeanPostProcessor这个接口.这个接口的postProcessAfterInitialization方法会在bean初始化结束后(赋值完成)被调用<em>。</em></p><p>这里先看一下最顶部的抽象类:AbstractAutoProxyCreator,这个抽象类主要抽象了实现代理的逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主要看这个方法，在bean初始化之后对生产出的bean进行包装</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">cacheKey</span> <span class="operator">=</span> getCacheKey(bean.getClass(), beanName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// wrapIfNecessary</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (beanName != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="built_in">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">        <span class="comment">// 意思就是如果该类有advice则创建proxy，</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">            <span class="comment">// 1.通过方法名也能简单猜测到，这个方法就是把bean包装为proxy的主要方法，</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line"><span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2.返回该proxy代替原来的bean</span></span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>1）将AnnotationAwareAspectJAutoProxyCreator注册到Spring容器中</strong></li><li><strong>2）AnnotationAwareAspectJAutoProxyCreator类的postProcessAfterInitialization()方法将所有有advice的bean重新包装成proxy</strong></li></ul><h2 id="创建proxy过程分析"><a href="#创建proxy过程分析" class="headerlink" title="创建proxy过程分析"></a><strong>创建proxy过程分析</strong></h2><p>​    通过之前的代码结构分析，我们知道，所有的bean在返回给用户使用之前都需要经过AnnotationAwareAspectJAutoProxyCreator类的postProcessAfterInitialization()方法，而该方法的主要作用也就是将所有拥有advice的bean重新包装为proxy，那么我们接下来直接分析这个包装为proxy的方法即可，看一下bean如何被包装为proxy，proxy在被调用方法时，是具体如何执行的</p><p> <strong>以下是AbstractAutoProxyCreator.wrapIfNecessary(Object bean, String beanName, Object cacheKey)中的createProxy()代码片段分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createProxy</span><span class="params">(</span></span><br><span class="line"><span class="params">Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="built_in">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1.创建proxyFactory，proxy的生产主要就是在proxyFactory做的</span></span><br><span class="line"><span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">proxyFactory.copyFrom(<span class="built_in">this</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line"><span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2.将当前bean适合的advice，重新封装下，封装为Advisor类，然后添加到ProxyFactory中</span></span><br><span class="line">Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">proxyFactory.addAdvisor(advisor);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line">customizeProxyFactory(proxyFactory);</span><br><span class="line"> </span><br><span class="line">proxyFactory.setFrozen(<span class="built_in">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3.调用getProxy获取bean对应的proxy</span></span><br><span class="line"><span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TargetSource中存放被代理的对象,这段代码主要是为了构建ProxyFactory,将配置信息(是否使用java proxy,是否threadlocal等),目标类,切面,传入ProxyFactory中</p></blockquote><h3 id="创建何种类型的Proxy？JDKProxy还是CGLIBProxy？"><a href="#创建何种类型的Proxy？JDKProxy还是CGLIBProxy？" class="headerlink" title="创建何种类型的Proxy？JDKProxy还是CGLIBProxy？"></a><strong>创建何种类型的Proxy？JDKProxy还是CGLIBProxy？</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getProxy()方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// createAopProxy()方法就是决定究竟创建何种类型的proxy</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.active) &#123;</span><br><span class="line">activate();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 关键方法createAopProxy()</span></span><br><span class="line"><span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// createAopProxy()</span></span><br><span class="line"><span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException &#123;</span><br><span class="line">        <span class="comment">// 1.config.isOptimize()是否使用优化的代理策略，目前使用与CGLIB</span></span><br><span class="line">        <span class="comment">// config.isProxyTargetClass() 是否目标类本身被代理而不是目标类的接口</span></span><br><span class="line">        <span class="comment">// hasNoUserSuppliedProxyInterfaces()是否存在代理接口</span></span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopConfigException</span>(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line"><span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2.如果目标类是接口或者是代理类，则直接使用JDKproxy</span></span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 3.其他情况则使用CGLIBproxy</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getProxy-方法"><a href="#getProxy-方法" class="headerlink" title="getProxy()方法"></a><strong>getProxy()方法</strong></h3><blockquote><p>由上面可知，通过createAopProxy()方法来确定具体使用何种类型的Proxy，针对于该示例，我们具体使用的为JdkDynamicAopProxy，下面来看下JdkDynamicAopProxy.getProxy()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JdkDynamicAopProxy</span> <span class="keyword">implements</span> <span class="title class_">AopProxy</span>, InvocationHandler, Serializable<span class="comment">// JdkDynamicAopProxy类结构，由此可知，其实现了InvocationHandler，则必定有invoke方法，来被调用，也就是用户调用bean相关方法时，此invoke()被真正调用</span></span><br><span class="line">    <span class="comment">// getProxy()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Creating JDK dynamic proxy: target source is &quot;</span> + <span class="built_in">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="built_in">this</span>.advised, <span class="literal">true</span>);</span><br><span class="line">findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// JDK proxy 动态代理的标准用法</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="invoke-方法"><a href="#invoke-方法" class="headerlink" title="invoke()方法"></a><strong>invoke()方法</strong></h3><blockquote><p>以上的代码模式可以很明确的看出来，使用了JDK动态代理模式，真正的方法执行在invoke()方法里，下面我们来看下该方法，来看下bean方法如何被代理执行的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">MethodInvocation invocation;</span><br><span class="line"><span class="type">Object</span> <span class="variable">oldProxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">setProxyContext</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="built_in">this</span>.advised.targetSource;</span><br><span class="line">Class&lt;?&gt; targetClass = <span class="literal">null</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 1.以下的几个判断，主要是为了判断method是否为equals、hashCode等Object的方法</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line"><span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line"><span class="comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line"><span class="keyword">return</span> hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line"><span class="comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line"><span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="built_in">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line"><span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line"><span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="built_in">this</span>.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object retVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.advised.exposeProxy) &#123;</span><br><span class="line"><span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span></span><br><span class="line"><span class="comment">// in case it comes from a pool.</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取当前bean被拦截方法链表</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="built_in">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.如果为空，则直接调用target的method</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 4.不为空，则逐一调用chain中的每一个拦截方法的proceed</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// We need to create a method invocation...</span></span><br><span class="line">invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截方法真正被执行调用invocation-proceed"><a href="#拦截方法真正被执行调用invocation-proceed" class="headerlink" title="拦截方法真正被执行调用invocation.proceed()"></a><strong>拦截方法真正被执行调用invocation.proceed()</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//We start with an index of -1 and increment early.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.currentInterceptorIndex == <span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">interceptorOrInterceptionAdvice</span> <span class="operator">=</span></span><br><span class="line"><span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="built_in">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line"><span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line"><span class="comment">// been evaluated and found to match.</span></span><br><span class="line"><span class="type">InterceptorAndDynamicMethodMatcher</span> <span class="variable">dm</span> <span class="operator">=</span></span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="built_in">this</span>.method, <span class="built_in">this</span>.targetClass, <span class="built_in">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Dynamic matching failed.</span></span><br><span class="line"><span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It&#x27;s an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结4：依次遍历拦截器链的每个元素，然后调用其实现，将真正调用工作委托给各个增强器</p></blockquote><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>  纵观以上过程可知：实际就是为bean创建一个proxy，JDKproxy或者CGLIBproxy，然后在调用bean的方法时，会通过proxy来调用bean方法</p><p>  重点过程可分为：</p><p>  <strong>1）将AnnotationAwareAspectJAutoProxyCreator注册到Spring容器中</strong></p><p>  <strong>2）AnnotationAwareAspectJAutoProxyCreator类的postProcessAfterInitialization()方法将所有有advice的bean重新包装成proxy</strong></p><p>  <strong>3）调用bean方法时通过proxy来调用，proxy依次调用增强器的相关方法，来实现方法切入</strong></p><p><img src="https://img-blog.csdnimg.cn/20190415112857658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> SpringAop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5注解</title>
      <link href="/post/b6dbc3f5.html"/>
      <url>/post/b6dbc3f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近在看B站颜群老师的课程，Javaweb&gt;spring&gt;springMVC&gt;mybatis&gt;spring高级，一路走来，跌跌撞撞，发现spring也不过尔尔，说白了，spring就是想尽办法将new做的更简单，更完美，更可配置。</p><p>Spring的一个核心功能是IOC，就是将Bean初始化加载到容器中，Bean是如何加载到容器的，可以使用Spring注解方式或者Spring XML配置方式。</p><p>Spring注解方式减少了配置文件内容，更加便于管理，并且使用注解可以大大提高了开发效率！</p><p>注解本身是没有功能的，和xml一样，注解和xml都是一种元数据，元数据即解释数据的数据，也就是所谓的配置。</p></blockquote><h3 id="xml和注解的最佳实践："><a href="#xml和注解的最佳实践：" class="headerlink" title="xml和注解的最佳实践："></a>xml和注解的最佳实践：</h3><blockquote><ul><li>xml用来管理bean；</li><li>注解只负责完成属性的注入；</li></ul></blockquote><h3 id="使用注解唯一需要注意的就是，必须开启注解的支持："><a href="#使用注解唯一需要注意的就是，必须开启注解的支持：" class="headerlink" title="使用注解唯一需要注意的就是，必须开启注解的支持："></a>使用注解唯一需要注意的就是，必须开启注解的支持：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//扫描指定包下的全部的标有@Component的类，并注册成bean.</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.guo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Spring的常用注解"><a href="#Spring的常用注解" class="headerlink" title="Spring的常用注解"></a>Spring的常用注解</h2><h3 id="给容器中注入组件"><a href="#给容器中注入组件" class="headerlink" title="给容器中注入组件"></a>给容器中注入组件</h3><blockquote><p>包扫描+组件标注注解</p><p>@<strong>Component</strong>：泛指各种组件</p><p>@<strong>Controller</strong>、@<strong>Service</strong>、@<strong>Repository</strong>都可以称为@<strong>Component</strong>。</p><p>@<strong>Controller</strong>：控制层</p><p>@<strong>Service</strong>：业务层</p><p>@<strong>Repository</strong>：数据访问层</p><p>@<strong>Bean</strong>: 导入第三方包里面的注解</p><p>@<strong>Import</strong>(要导入到容器中的组件)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是Person&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;素小暖&quot;</span>,<span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>ImportSelector</strong>：返回需要导入的组件的全类名数组；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * AnnotationMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">    * BeanDefinitionRegistry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment">    * 把所有需要添加到容器中的bean，调用BeanDefinitionRegistry.registerBeanDefinition手动注入</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Red&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">definition2</span> <span class="operator">=</span> registry.containsBeanDefinition(<span class="string">&quot;com.atguigu.bean.Blue&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(definition &amp;&amp; definition2)&#123;</span><br><span class="line">            <span class="comment">//指定bean定义信息（bean的类型，bean的scope）</span></span><br><span class="line">            <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(RainBow.class);</span><br><span class="line">            <span class="comment">//注册一个bean，指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;rainBow&quot;</span>,rootBeanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用spring提供的<strong>FactoryBean</strong>（工厂Bean）</p><ul><li>默认获取到的是工厂<strong>Bean</strong>调用<strong>getObject</strong>创建的对象</li><li>要获取工厂<strong>Bean</strong>本身，需要在id前面加一个&amp;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ColorFactoryBean <span class="title function_">colorFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ColorFactoryBean</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个spring定义的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Color&gt; &#123;</span><br><span class="line">    <span class="comment">//返回一个Color对象，并将Color添加到容器中</span></span><br><span class="line">    <span class="keyword">public</span> Color <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ColorFactoryBean,getObject()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.class;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="注入bean的注解"><a href="#注入bean的注解" class="headerlink" title="注入bean的注解"></a>注入bean的注解</h3><blockquote><p>@<strong>Autowired</strong>：由bean提供</p><ul><li>@Autowired可以作用在变量、setter方法、构造函数上；</li><li>有个属性为required，可以配置为false；</li></ul><p>@<strong>Inject</strong>：由JSR-330提供</p><ul><li>@Inject用法和@Autowired一样。</li></ul><p>@<strong>Resource</strong>：由JSR-250提供</p><p>@<strong>Autowired</strong>、@<strong>Inject</strong>是默认按照类型匹配的，@<strong>Resource</strong>是按照名称匹配的，@<strong>Autowired</strong>如果需要按照名称匹配需要和@<strong>Qualifier</strong>一起使用，@Inject和@Name一起使用。</p><p>@<strong>Primary</strong></p><p>让<strong>spring</strong>进行自动装配的时候，默认使用首选的<strong>bean</strong>，和@<strong>Qualifier</strong>一个效果。</p></blockquote><h3 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h3><blockquote><ol><li>作用: 在json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响。</li><li>使用方法: 一般标记在属性或者方法上，返回的json数据即不包含该属性。</li><li>注解失效:如果注解失效，可能是因为你使用的是fastJson，尝试使用对应的注解来忽略字段，注解为：@JSONField(serialize = false)，使用方法一样。</li></ol></blockquote><h3 id="初始化和销毁方法"><a href="#初始化和销毁方法" class="headerlink" title="初始化和销毁方法"></a>初始化和销毁方法</h3><blockquote><ol><li>通过@Bean(initMethod=”init”,destoryMethod=”destory”)方法</li><li>通过bean实现InitializingBean来定义初始化逻辑，DisposableBean定义销毁逻辑</li><li>可以使用JSR250：@PostConstruct：初始化方法；@PreDestory：销毁方法。</li><li>BeanPostProcessor：bean的后置处理器，在bean初始化前后进行一些处理工作</li><li>postProcessBeforeInitialization：在初始化之前工作；</li><li>postProcessAfterInitialization：在初始化工作之后工作；</li></ol></blockquote><p>Java配置类相关注解</p><blockquote><p>@<strong>Configuration</strong></p><p>声明当前类为配置类；</p><p>@<strong>Bean</strong></p><p>注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式；</p><p>@<strong>ComponentScan</strong></p><p>用于对<strong>Component</strong>进行扫描；</p></blockquote><h3 id="切面（AOP）相关注解"><a href="#切面（AOP）相关注解" class="headerlink" title="切面（AOP）相关注解"></a>切面（AOP）<strong>相关注解</strong></h3><blockquote><p><a href="https://ser-mingshao.github.io/post/a528d135">Spring AOP详细介绍</a></p><p>Spring支持<strong>AspectJ</strong>的注解式切面编程。</p><p>@<strong>Aspect</strong> 声明一个切面</p><p>@<strong>After</strong> 在方法执行之后执行（方法上）</p><p>@<strong>Before</strong> 在方法执行之前执行（方法上）</p><p>@<strong>Around</strong> 在方法执行之前与之后执行（方法上）</p><p>@<strong>PointCut</strong> 声明切点</p><p>在java配置类中使用@<strong>EnableAspectJAutoProxy</strong>注解开启<strong>Spring</strong>对<strong>AspectJ</strong>代理的支持</p></blockquote><p>@Bean的属性支持</p><blockquote><p>@<strong>Scope</strong>设置类型包括：</p><p>设置Spring容器如何新建Bean实例（方法上，得有@<strong>Bean</strong>）</p><p>① <strong>Singleton</strong></p><p>（单例,一个Spring容器中只有一个bean实例，默认模式）,</p><p>② <strong>Protetype</strong></p><p>（每次调用新建一个bean）,</p><p>③ <strong>Request</strong></p><p>（web项目中，给每个http request新建一个bean）,</p><p>④ <strong>Session</strong></p><p>（web项目中，给每个http session新建一个bean）,</p><p>⑤ <strong>GlobalSession</strong></p><p>（给每一个 global http session新建一个Bean实例）</p></blockquote><h3 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h3><blockquote><p>支持如下方式的注入：</p><ul><li>注入普通字符</li><li>注入操作系统属性</li><li>注入表达式结果</li><li>注入其它bean属性</li><li>注入文件资源</li><li>注入网站资源</li><li>注入配置文件</li></ul><p>@<strong>Value</strong>三种情况的用法。</p><ol><li>${}是去找外部配置的参数，将值赋过来</li><li>#{}是SpEL表达式，去寻找对应变量的内容</li><li>#{}直接写字符串就是将字符串的值注入进去</li></ol></blockquote><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><blockquote><p>@<strong>Profile</strong></p><p>指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件。</p><p>@<strong>Conditional</strong></p><p>通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。</p></blockquote><h3 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h3><blockquote><p>@<strong>EnableAsync</strong></p><p>配置类中通过此注解开启对异步任务的支持；</p><p>@<strong>Async</strong></p><p>在实际执行的bean方法使用该注解来声明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p></blockquote><h3 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h3><blockquote><p>@<strong>EnableScheduling</strong></p><p>在配置类上使用，开启计划任务的支持（类上）</p><p>@<strong>Scheduled</strong></p><p>来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p></blockquote><h2 id="SpringMVC常用注解"><a href="#SpringMVC常用注解" class="headerlink" title="SpringMVC常用注解"></a>SpringMVC常用注解</h2><blockquote><h3 id="1、-EnableWebMvc"><a href="#1、-EnableWebMvc" class="headerlink" title="1、@EnableWebMvc"></a>1、@EnableWebMvc</h3><p>在配置类中开启Web MVC的配置支持。</p><h3 id="2、-Controller"><a href="#2、-Controller" class="headerlink" title="2、@Controller"></a>2、@Controller</h3><p>3、@RequestMapping<br>用于映射web请求，包括访问路径和参数。</p><h3 id="4、-ResponseBody"><a href="#4、-ResponseBody" class="headerlink" title="4、@ResponseBody"></a>4、@ResponseBody</h3><p>支持将返回值放到response内，而不是一个页面，通常用户返回json数据。</p><h3 id="5、-RequestBody"><a href="#5、-RequestBody" class="headerlink" title="5、@RequestBody"></a>5、@RequestBody</h3><p>允许request的参数在request体中，而不是在直接连接的地址后面。（放在参数前）</p><h3 id="6、-PathVariable"><a href="#6、-PathVariable" class="headerlink" title="6、@PathVariable"></a>6、@PathVariable</h3><p>用于接收路径参数，比如@RequestMapping(“/hello/{name}”)声明的路径，将注解放在参数前，即可获取该值，通常作为Restful的接口实现方法。</p><h3 id="7、-RestController"><a href="#7、-RestController" class="headerlink" title="7、@RestController"></a>7、@RestController</h3><p>该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><h3 id="8、-ControllerAdvice"><a href="#8、-ControllerAdvice" class="headerlink" title="8、@ControllerAdvice"></a>8、@ControllerAdvice</h3><p>全局异常处理<br>全局数据绑定<br>全局数据预处理</p><h3 id="9、-ExceptionHandler"><a href="#9、-ExceptionHandler" class="headerlink" title="9、@ExceptionHandler"></a>9、@ExceptionHandler</h3><p>用于全局处理控制器里的异常。</p><h3 id="10、-InitBinder"><a href="#10、-InitBinder" class="headerlink" title="10、@InitBinder"></a>10、@InitBinder</h3><p>用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><h3 id="11、-ModelAttribute"><a href="#11、-ModelAttribute" class="headerlink" title="11、@ModelAttribute"></a>11、@ModelAttribute</h3><p>（1）@ModelAttribute注释方法 </p><p>如果把@ModelAttribute放在方法的注解上时，代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法。可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。比如权限的验证（也可以使用Interceptor）等。</p><p>（2）@ModelAttribute注释一个方法的参数 </p><p>当作为方法的参数使用，指示的参数应该从模型中检索。如果不存在，它应该首先实例化，然后添加到模型中，一旦出现在模型中，参数字段应该从具有匹配名称的所有请求参数中填充。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> SpringAop </tag>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDi四种依赖注入方式</title>
      <link href="/post/7a5d2d7e.html"/>
      <url>/post/7a5d2d7e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/Ziphtracks/Figurebed/raw/master/img/1/20200712213350.png" alt=""></p><h2 id="SpringDI（依赖注入）"><a href="#SpringDI（依赖注入）" class="headerlink" title="SpringDI（依赖注入）"></a>SpringDI（依赖注入）</h2><hr><h3 id="DI概述"><a href="#DI概述" class="headerlink" title="DI概述"></a>DI概述</h3><blockquote><h3 id="Dependency-Injection即为依赖注入，简称DI-。"><a href="#Dependency-Injection即为依赖注入，简称DI-。" class="headerlink" title="Dependency Injection即为依赖注入，简称DI 。"></a><code>Dependency Injection</code><strong>即为依赖注入，简称DI</strong> 。</h3><p>简单来说，在Spring创建对象的同时，为其属性赋值，称之为依赖注入。</p><p>形象来说，组件之间依赖关系由容器在运行期决定的，即由容器动态的将某个依赖关系注入到组件之中。</p></blockquote><h3 id="什么是DI"><a href="#什么是DI" class="headerlink" title="什么是DI"></a>什么是DI</h3><h4 id="了解DI的思想"><a href="#了解DI的思想" class="headerlink" title="了解DI的思想"></a>了解DI的思想</h4><blockquote><p>简单了解了DI（依赖注入），在看依赖注入这个词，我们也可以将依赖注入以IOC（控制反转）的形式拆分它。</p><p>顾名思义，依赖注入是由“依赖”和“注入”两个词汇组合而成，那么我们再一次顺藤摸瓜，分别分析这两个词语!</p></blockquote><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><blockquote><p>依赖一词，可以拆分成很多元素。比如说，达成依赖条件必须是<strong>两个对象</strong> ，<strong>谁依赖谁</strong> ，<strong>某一个对象依赖另一个对象的什么</strong> 。这里我们可以根据这几个条件列举出这几种情况：</p><ol><li>关于谁依赖与谁，当然是应用程序依赖于IOC容器。因为应用程序依赖于IOC容器提供的对象所需外部资源，所以就产生了这种依赖关系。（可以理解为入口，虽然不是这么严谨吧！）</li></ol></blockquote><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><blockquote><p>注入一次，可以也可以拆分成很多元素。比如说，注入可以分解成<strong>谁注入谁</strong> ，<strong>注入了什么</strong> 。这里我们也可以根据这两个条件来列举出这几种情况：</p><ol><li>关于谁注入谁，身为容器的IOC肯定是被注入的对象，也就是说我们将所需要的对象注入到IOC容器中。至于注入了什么，很明显，就是我们项目中所需要的对象、资源、数据等等。简单来说，我们需要外部的资源既可以注入到IOC容器中，并由IOC容器来实现注入对象的控制反转！</li><li>IOC的是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。</li></ol></blockquote><h3 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h3><h4 id="Setter方法注入"><a href="#Setter方法注入" class="headerlink" title="Setter方法注入"></a>Setter方法注入</h4><blockquote><p>Setter方法注入，它只需要提供对应的Setter方法接口实现注入，由于JavaBean一般都实现了Setter方法，所以Setter方法注入也成为了我们常用的注入方法之一。</p></blockquote><h5 id="定义JavaBean"><a href="#定义JavaBean" class="headerlink" title="定义JavaBean"></a>定义JavaBean</h5><blockquote><p>定义一个JavaBean并赋予其Setter方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylifes1110.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lombok@Data注解提供了Setter方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer             id;</span><br><span class="line">    <span class="keyword">private</span> String              password;</span><br><span class="line">    <span class="keyword">private</span> String              sex;</span><br><span class="line">    <span class="keyword">private</span> Integer             age;</span><br><span class="line">    <span class="keyword">private</span> Date                bornDate;</span><br><span class="line">    <span class="keyword">private</span> String[]            hobbys;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt;         phones;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt;        names;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; countries;</span><br><span class="line">    <span class="keyword">private</span> Properties          files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入各种数据类型"><a href="#注入各种数据类型" class="headerlink" title="注入各种数据类型"></a>注入各种数据类型</h5><blockquote><p>注意：Spring底层对Date日期类型做了处理，默认处理格式为“yyyy/MM/dd”</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;User&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入基本数据类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入日期类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bornDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1999/09/09&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数组类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Run<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Jump<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Climb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入List集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Ziph<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Join<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Marry<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Set集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phones&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>119<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Properties类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;first&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;second&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;third&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入Map集合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;CHINA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;USA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;美国&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;UK&quot;</span> <span class="attr">value</span>=<span class="string">&quot;英国&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注入自建类型数据"><a href="#注入自建类型数据" class="headerlink" title="注入自建类型数据"></a>注入自建类型数据</h5><blockquote><p>将Service层需要一个Dao层实现类对象，我们可以使用注入方式来实现对Service层和Dao层的对象关联</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>将创建的Bean对象注入到另一个对象中，比如一个JavaBean对象中作为了另一个JavaBean对象的属性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--次要bean,被作为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;position&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海市&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;zipCode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100001&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主要bean,操作的主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--address属性引用address对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><blockquote><p>创建对象时，Spring工厂会通过构造方法为对象的属性赋值。由于某些框架或者项目中并没有为JavaBean提供Setter方法，我们就可以利用其构造方法来注入。不要和我说，没有提供构造方法哈！（开个玩笑！）</p></blockquote><h5 id="定义JavaBean-1"><a href="#定义JavaBean-1" class="headerlink" title="定义JavaBean"></a>定义JavaBean</h5><blockquote><p>定义一个JavaBean对象，为其提供构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Constructors</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id , String name , String sex , Integer age)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造方法注入-1"><a href="#构造方法注入-1" class="headerlink" title="构造方法注入"></a>构造方法注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 除标签名称有变化,其他均和Set注入一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><blockquote><p>不用在配置中 指定为哪个属性赋值，及赋什么值。由spring自动根据某个 “原则” ，在工厂中查找一个bean，为属性注入属性值。</p></blockquote><h5 id="注入场景"><a href="#注入场景" class="headerlink" title="注入场景"></a>注入场景</h5><blockquote><p>将Dao层实现类对象注入到Service层并调用方法得以测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mylifes1110.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.mylifes1110.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------insertUser and UserService------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userDao.insertUser(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动注入的两种方式"><a href="#自动注入的两种方式" class="headerlink" title="自动注入的两种方式"></a>自动注入的两种方式</h5><blockquote><p>基于名称自动注入值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为UserServiceImpl中的属性基于名称自动注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.userServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>基于类型自动注入值，根据实现的接口来判断并自动注入值，如果实现此接口的实现类太多，它会在很多实现此接口的实现类中选择名字相同的实现类进行注入。（现根据判断，如果不成功，则根据名称注入）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.dao.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为UserServiceImpl中的属性基于类型自动注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mylifes1110.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解自动注入"><a href="#注解自动注入" class="headerlink" title="注解自动注入"></a>注解自动注入</h4><div class="table-container"><table><thead><tr><th style="text-align:left">注解名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">@Autowired</td><td style="text-align:left">基于类型自动注入</td></tr><tr><td style="text-align:left">@Resource</td><td style="text-align:left">基于名称自动注入</td></tr><tr><td style="text-align:left">@Qualifier(“userDAO”)</td><td style="text-align:left">限定要自动注入的bean的id，一般和@Autowired联用</td></tr><tr><td style="text-align:left">@Value</td><td style="text-align:left">注入简单类型数据 （jdk8种基本数据类型+String类型）</td></tr></tbody></table></div><blockquote><p>使用基于类型自动注入，将Dao层注入到Service层    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;   </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//注入类型为UserDao的bean</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span> <span class="comment">//如果有多个类型为UserDao的bean,可以用此注解从中指定一个</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用基于名称自动注入，将Dao层注入到Serivce层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;   </span><br><span class="line">    <span class="meta">@Resource(&quot;userDao&quot;)</span> <span class="comment">//注入id=“userDao”的bean</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用注入简单类型数据注解来完成简单注入JavaBean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span>    <span class="comment">//注入数字</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value(&quot;Ziph&quot;)</span> <span class="comment">//注入String</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-动态代理实现AOP</title>
      <link href="/post/a528d135.html"/>
      <url>/post/a528d135.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是动态代理"><a href="#一、什么是动态代理" class="headerlink" title="一、什么是动态代理"></a>一、什么是动态代理</h2><blockquote><p>动态代理其实就是<code>Java</code>中的一个方法，这个方法可以实现：</p><p><strong>动态创建一组指定的接口的实现对象（在运行时，创建实现了指定的一组接口的对象）</strong><br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="comment">//obj对象的类型实现了A和B两个接口</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> 方法(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="二、动态代理初体验"><a href="#二、动态代理初体验" class="headerlink" title="二、动态代理初体验"></a>二、动态代理初体验</h2><blockquote><p>我们根据上面的思路来体验一下Java中的动态代理吧，首先我们要先写两个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&gt;&#125;<span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后我们就先来看一下动态代理的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                     Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br></pre></td></tr></table></figure><p>上面这个就是动态代理类（Proxy）类中的创建代理对象的方法，下面介绍一下方法的三个参数：</p><ul><li><code>ClassLoader loader</code>：方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象。需要生成一个类，而且这个类也需要加载到方法区中，所以我们需要一个<code>ClassLoader</code>来加载该类</li><li><code>Class&lt;?&gt;[] interfaces</code>：我们需要代理对象实现的数组</li><li><code>InvocationHandler h</code>：调用处理器</li></ul><p>这里你可能对<code>InvocationHandler</code>有疑惑，这里先买个关子，下面马上揭晓。<br>我们现在就使用动态代理创建一个代理对象吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">       <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">       <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">       <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">       <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">       <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>经过测试代码运行成功，说明生成的代理对象确实实现了A接口和B接口，但是我想你一定会对代理对象如何实现了A接口和B接口感兴趣，你一定想知道如果使用代理对象调用相应接口的方法会发生什么感兴趣，下面我们一起来探究一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;上面代码的基础上加上下面的代码</span><br><span class="line">&gt;a.a();</span><br><span class="line">&gt;b.b(); </span><br></pre></td></tr></table></figure><p><img src="./img/Spring/AOP/webp.png" alt=""></p><p>我们可以发现什么也没有发生。这是因为我们根本没有为代理对象添加实现逻辑。可是实现逻辑添加在哪里呢？哈哈，当然是<code>InvocationHandler</code>中了。下面就看一看添加了实现逻辑的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 代理对象实现的所有接口中的方法，内容都是调用InvocationHandler的invoke()方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！！！！&quot;</span>);<span class="comment">//注意这里添加了一点小逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">    <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line"></span><br><span class="line">   a.a();</span><br><span class="line">    b.b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截图如下：</p><p><img src="./img/Spring/AOP/02.png" alt=""></p><p>这里我们发现A接口和B接口的实现逻辑都是调用了<code>invoke</code>这个方法中的逻辑，其实除了调用代理对象的<code>native</code>方法，调用代理对象的其他所有方法本质都是调用了<code>invoke</code>方法，下面我们再来看第三个实例，让我们对动态代理有更深刻的认识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 三个参数</span></span><br><span class="line"><span class="comment">        * 1、ClassLoader</span></span><br><span class="line"><span class="comment">        * 方法需要动态生成一个类，这个类实现了A和B两个接口，然后创建这个类的对象</span></span><br><span class="line"><span class="comment">        * 需要生成一个类，这个类也需要加载到方法区中，所以我们需要一个ClassLoader来加载该类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2、Class[] interfaces</span></span><br><span class="line"><span class="comment">        * 我们需要代理对象实现的数组</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3、InvocationHandler</span></span><br><span class="line"><span class="comment">        * 调用处理器</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 代理对象实现的所有接口中的方法，内容都是调用InvocationHandler的invoke()方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">//这里创建一个空实现的调用处理器。</span></span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好！！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;<span class="comment">//这里改为返回&quot;Hello&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;A.class, B.class&#125;, invocationHandler);</span><br><span class="line">    <span class="comment">//强转为A和B接口类型，说明生成的代理对象实现了A和B接口</span></span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> (A) obj;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> (B) obj;</span><br><span class="line">    a.toString();<span class="comment">//注意这里调用了toString()方法</span></span><br><span class="line">    b.getClass();<span class="comment">//注意这里调用了getClass()方法</span></span><br><span class="line">    <span class="comment">//这里在A接口中添加了一个方法public Object aaa(String s1, int i);</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> a.aaa(<span class="string">&quot;Hello&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    System.out.println(obj.getClass());<span class="comment">//这里看一下代理对象是什么</span></span><br><span class="line">    System.out.println(hello);<span class="comment">//这里看一下返回值是什么</span></span><br><span class="line"></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><img src="./img/Spring/AOP/03.png" alt=""></p><p>通过代码的结果我们大胆的猜测一下，代理对象方法的返回值其实就是<code>invoke</code>方法的返回值，代理对象其实就是使用反射机制实现的一个运行时对象。哈哈，当然这些肯定不是猜测了，其实确实就是这样。下面是时候总结一下<code>InvocationHandler</code>的<code>invoke</code>方法了。如下图所示：</p><p><img src="./img/Spring/AOP/06.png" alt=""></p><p>当我们调用代理对象的方法时，其对应关系就如上图所示。</p></blockquote><hr><h2 id="三、初步实现AOP"><a href="#三、初步实现AOP" class="headerlink" title="三、初步实现AOP"></a>三、初步实现AOP</h2><blockquote><p>在我们对动态代理有了一定的认识之后，我们就可以实现最基本版本的AOP了，当然，这是一个非常残缺的AOP实现，甚至都不能称之为AOP实现。<br>我们先写一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="comment">//服务生</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Waiter</span> &#123;</span><br><span class="line">    <span class="comment">//服务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>然后给出该接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManWaiter</span> <span class="keyword">implements</span> <span class="title class_">Waiter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>然后我们就通过动态代理来对上面的<code>ManWaiter</code>进行增强：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManWaiter</span>();</span><br><span class="line">        waiter.server();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">manWaiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManWaiter</span>();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        Class[] interfaces = &#123;Waiter.class&#125;;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaiterInvocationHandler</span>(manWaiter);</span><br><span class="line">        <span class="comment">//得到代理对象，代理对象就是在目标对象的基础上进行了增强的对象</span></span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> (Waiter) Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        waiter.server();<span class="comment">//前面添加“你好”，后面添加“再见”</span></span><br><span class="line">    &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">WaiterInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Waiter waiter;</span><br><span class="line"></span><br><span class="line">    WaiterInvocationHandler(Waiter waiter) &#123;</span><br><span class="line">        <span class="built_in">this</span>.waiter = waiter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        waiter.server();<span class="comment">//调用目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;再见&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="./img/Spring/AOP/04.png" alt=""></p><p>你肯定要说了，这算什么AOP，增强的代码都是硬编码到<code>invoke</code>方法中的，大家稍安勿躁，我们不是已经对需要增强的对象做了增强吗。这里可以的目标对象为<code>manWaiter</code>，增强为<code>System.out.println(&quot;你好&quot;);</code>和<code>System.out.println(&quot;再见&quot;);</code>，切点为<code>server()</code>方法调用。其实还是可以看做一下原始的AOP的。</p></blockquote><h2 id="四、完善的AOP实现"><a href="#四、完善的AOP实现" class="headerlink" title="四、完善的AOP实现"></a>四、完善的AOP实现</h2><blockquote><p>我们从初步实现的AOP中可以发现很多问题，比如我们不能把增强的逻辑硬编码到代码中，我们需要实现可变的增强，下面我们就解决一下这些问题，来实现一个比较完善的AOP。<br>我们仍然引用上面的<code>Waiter</code>接口和<code>Manwaiter</code>实现类。<br>然后我们添加一个前置增强接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前置增强</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>再添加一个后置增强接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AfterAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>我们把产生代理对象的代码封装为一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> com.sun.org.apache.regexp.internal.RE;</span><br><span class="line">&gt;<span class="keyword">import</span> org.junit.After;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">&gt;<span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* ProxFactory用来生成代理对象</span></span><br><span class="line"><span class="comment">* 它需要所有的参数：目标对象，增强，</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1、创建代理工厂</span></span><br><span class="line"><span class="comment">* 2、给工厂设置目标对象、前置增强、后置增强</span></span><br><span class="line"><span class="comment">* 3、调用creatProxy()得到代理对象</span></span><br><span class="line"><span class="comment">* 4、执行代理对象方法时，先执行前置增强，然后是目标方法，最后是后置增强</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="comment">//其实在Spring中的AOP的动态代理实现的一个织入器也是叫做ProxyFactory </span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object targetObject;<span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> BeforeAdvice beforeAdvice;<span class="comment">//前值增强</span></span><br><span class="line">    <span class="keyword">private</span> AfterAdvice afterAdvice;<span class="comment">//后置增强</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来生成代理对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 给出三个参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前类型所实现的所有接口类型</span></span><br><span class="line">        Class[] interfaces = targetObject.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 在调用代理对象的方法时，会执行这里的内容</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span>(beforeAdvice != <span class="literal">null</span>) &#123;</span><br><span class="line">                    beforeAdvice.before();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(targetObject, args);<span class="comment">//调用目标对象的目标方法</span></span><br><span class="line">                <span class="comment">//执行后续增强</span></span><br><span class="line">                afterAdvice.after();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回目标对象的返回值</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 2、得到代理对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyObject</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//get和set方法略</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>然后我们将相关的参数注入到<code>ProxyFactory</code>后就可以通过<code>creatProxy()</code>方法获取代理对象了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yifan Jia on 2018/6/5.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tset1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();<span class="comment">//创建工厂</span></span><br><span class="line">        proxyFactory.setTargetObject(<span class="keyword">new</span> <span class="title class_">ManWaiter</span>());<span class="comment">//设置目标对象</span></span><br><span class="line">        <span class="comment">//设置前置增强</span></span><br><span class="line">        proxyFactory.setBeforeAdvice(<span class="keyword">new</span> <span class="title class_">BeforeAdvice</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户你好&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置后置增强</span></span><br><span class="line">        proxyFactory.setAfterAdvice(<span class="keyword">new</span> <span class="title class_">AfterAdvice</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户再见&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Waiter</span> <span class="variable">waiter</span> <span class="operator">=</span> (Waiter) proxyFactory.creatProxy();</span><br><span class="line">        waiter.server();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="./img/Spring/AOP/05.png" alt=""></p><p>这时候我们已经可以自定义任意的增强逻辑了，是不是很神奇。</p></blockquote><h2 id="五、动态代理实现AOP总结"><a href="#五、动态代理实现AOP总结" class="headerlink" title="五、动态代理实现AOP总结"></a>五、动态代理实现AOP总结</h2><blockquote><p>通过上面的内容，我们已经通过动态代理实现了一个非常简陋的AOP，这里的AOP实现还是有很多的不足之处。下面我把Spring中的<code>ProxyFactory</code>实现贴出来，大家可以研究一下Spring中的<code>ProxyFactory</code>的优势在哪里，另外，Spring中还有其他的基于动态代理实现的织入器，<code>ProxyFactory</code>只是其中最基础的版本，大家有兴趣可以研究一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">extends</span> <span class="title class_">ProxyCreatorSupport</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">()</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">            Assert.notNull(target, <span class="string">&quot;Target object must not be null&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.setInterfaces(ClassUtils.getAllInterfaces(target));</span><br><span class="line">            <span class="built_in">this</span>.setTarget(target);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class... proxyInterfaces)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setInterfaces(proxyInterfaces);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class&lt;?&gt; proxyInterface, Interceptor interceptor)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.addInterface(proxyInterface);</span><br><span class="line">            <span class="built_in">this</span>.addAdvice(interceptor);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Class&lt;?&gt; proxyInterface, TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.addInterface(proxyInterface);</span><br><span class="line">            <span class="built_in">this</span>.setTargetSource(targetSource);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.createAopProxy().getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.createAopProxy().getProxy(classLoader);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; proxyInterface, Interceptor interceptor)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(proxyInterface, interceptor)).getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; proxyInterface, TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(proxyInterface, targetSource)).getProxy();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(TargetSource targetSource)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(targetSource.getTargetClass() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot create class proxy for TargetSource with null target class&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">                proxyFactory.setTargetSource(targetSource);</span><br><span class="line">                proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> proxyFactory.getProxy();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> SpringAop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium15安装与激活(完整激活版)</title>
      <link href="/post/b6bbba88.html"/>
      <url>/post/b6bbba88.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先需要到官网进行下载"><a href="#首先需要到官网进行下载" class="headerlink" title="首先需要到官网进行下载"></a><strong>首先需要到官网进行下载</strong></h2><hr><blockquote><p>破解安装的是15版本的别下错了</p><p>官网目前最高版本是<code>V16</code>版本,如果找不到15版的话,对应的下载链接已经安利在下面了</p><p>下载安装的步骤就不多说了,直接next 下一步 —跳过~</p></blockquote><p>Windows10 64bit:<a class="btn-beautify outline blue larger" href="http://download.navicat.com/download/navicat150_premium_cs_x64.exe"   title="点我下载"><i class="far fa-hand-point-right"></i><span>点我下载</span></a> </p><hr><p> <em>免责声明：本人学生党一枚，本篇博客是从网络中搜集借鉴整理的，仅供个人学习使用，未用于商业用途，对于产生的一切不良后果概不负责，进来借鉴学习的朋友也仅供个人学习，如果侵害了您的权益请立即联系博主，博主会立即删除本文，谢谢(O ^ ~ ^ O)。</em></p><hr><h2 id="Navicat-Premium15破解过程"><a href="#Navicat-Premium15破解过程" class="headerlink" title="Navicat Premium15破解过程"></a><strong>Navicat Premium15破解过程</strong></h2><h3 id="首先需要下载注册工具"><a href="#首先需要下载注册工具" class="headerlink" title="首先需要下载注册工具"></a>首先需要下载注册工具</h3><p><img src="./img/idea/Navicat/01.png" alt=""></p><blockquote><a class="btn-beautify outline blue larger" href="https://pan.baidu.com/s/1nsYWtBmnBa4Y25ntK-AQ6A?pwd=yyds"   title="注册工具"><i class="far fa-hand-point-right"></i><span>注册工具</span></a><p>直接双击运行注册工具（本人在未断网未关闭防火墙情况下成功），选择对应的navicat版本，此处为v15,点击Path选择刚才安装navicat目录下的navicat.exe文件</p><p><img src="./img/idea/Navicat/02.png" alt=""></p><p><img src="./img/idea/Navicat/03png" alt=""></p><p><strong>出现此界面表示成功</strong></p></blockquote><p><img src="./img/idea/Navicat/04.png" alt=""></p><blockquote><p>此处有部分朋友反应解压时工具会被自动删除，因为工具的特殊性，可能会被防护软件监测为病毒删除</p><p>为了保险起见可关闭网络和防火强，若安装了其他防护软件如电脑管家也要一并关闭，并将windows的实时保护关闭</p></blockquote><p><img src="./img/idea/Navicat/05.png" alt=""></p><blockquote><p><strong>选择对应的版本和语言，输入Your Name和Your Organization（可随意输入，也可以不修改使用默认的）,点击生成注册码，然后运行Navicat将注册码复制到软注册栏</strong></p></blockquote><p><img src="./img/idea/Navicat/06.png" alt=""></p><p><img src="./img/idea/Navicat/07.png" alt=""></p><blockquote><p><strong>点击激活</strong></p><p>此处部分人的激活码后面显示的是红叉，可能是由于上面步骤操作不规范</p><p>未显示cracked就启动了navicate、版本选择不匹配，Patch未选择等原因，可删除软件和安装目录后重新按照步骤安装</p></blockquote><p>　<img src="./img/idea/Navicat/08.png" alt=""></p><p><strong>选择手动激活</strong></p><p><img src="./img/idea/Navicat/09.png" alt=""></p><p><img src="./img/idea/Navicat/10.png" alt=""></p><p><strong>将请求码复制到注册工具的Request Code中，点击Generate</strong></p><p><img src="./img/idea/Navicat/11.png" alt=""></p><p><strong>返回activation code即为成功</strong></p><p><img src="./img/idea/Navicat/12.png" alt=""></p><p>　<strong>此时手动激活页面的激活码会被自动填充，点击激活即可</strong></p><p><img src="./img/idea/Navicat/13.png" alt=""></p><p>​        <strong>至此，Navicat Premium15的激活已经完成</strong></p><p>　　<strong>若激活失败可以卸载Navicat Premium删除安装目录后重新尝试几次</strong></p><p><img src="./img/idea/Navicat/14.png" alt=""></p><p><img src="./img/idea/Navicat/15.png" alt=""></p><p><strong>激活完成就可以开始使用Navicat了 (~ v *)</strong></p><p><img src="./img/idea/Navicat/16.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Navicats </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea安装Ultimate最新版[破解]</title>
      <link href="/post/bb6ff07f.html"/>
      <url>/post/bb6ff07f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言:</p><p>前段时间电脑重装了,于是去Intellij官网下了一个IntelliJ IDEA Edu版本,但是Edu的这个版本好想没有Spring config,经过我一番查询,发现只有Ultimate版本才有…..而且不管是社区版还是Edu版很多功能都是不齐全的,所以索性就弄个终极版算了</p><p><img src="./img/idea/pojie/01.png" alt="01"></p><p>在网上找了半天发现很多破解的都不行,什么注册码,什么破解器,而且有的套路都好深….让你加公众号回复6666领取破解码…..一次就算了,没想到他把破解码分两次,第二段破解码在另外一个公众号,害,真是一言难尽,后面终于还是通过不懈的努力给破解了,今天就把这个方法分享给大家</p><p>破解过程:是通过屏蔽官方的网络校验，达到永久激活的目的。亲测有效，方法也比较简单，下面是详细的图文教程</p><p>声明：本IntellIj IDEA激活破解教程，用到的激活补丁均来自网络，请勿商用，仅供个人使用，如有侵权，请联系作者删除。大家如果资金允许的话，最好购买正版</p><p>教程适用2021.3.2版本,更新日期在文本头部,后面如果出了3.3的版本就不知道能不能适用了,但目前最高版本是3.2</p></blockquote><hr><p>idea版本类别:</p><div class="table-container"><table><thead><tr><th style="text-align:center">版本类别</th><th style="text-align:center">注解</th></tr></thead><tbody><tr><td style="text-align:center">Ultimate</td><td style="text-align:center">终极版</td></tr><tr><td style="text-align:center">Community</td><td style="text-align:center">社区版</td></tr><tr><td style="text-align:center">IDEA Edu</td><td style="text-align:center">学生教育版</td></tr></tbody></table></div><blockquote><p>目前最高版本是2021.3.2的版本 </p></blockquote><p><img src="./img/idea/pojie/idea版本.png" alt="image-20220310090056430"></p><hr><h2 id="1-下载Idea"><a href="#1-下载Idea" class="headerlink" title="1.下载Idea"></a>1.下载Idea</h2><blockquote><p>直接去官方下载最新版就行了,注意是Ultimate版本,别下错了</p><p><img src="./img/idea/pojie/02.png" alt="02"></p></blockquote><p>如果还分不清那个是Ultimate版,就 <a class="btn-beautify outline blue larger" href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows"   title="点我下载"><i class="far fa-hand-point-right"></i><span>点我下载</span></a></p><p><img src="./img/idea/pojie/image-20220309215122241.png" alt="image-20220309215122241"></p><hr><h2 id="2-下载激活破解补丁"><a href="#2-下载激活破解补丁" class="headerlink" title="2. 下载激活破解补丁"></a>2. 下载激活破解补丁</h2><blockquote><p>为了方便适用,我打包放到了百度网盘里面</p></blockquote> <a class="btn-beautify outline blue larger" href="https://pan.baidu.com/s/14ebA6x85epkUECJsigA-2Q?pwd=yyds"   title="点我下载补丁"><i class="far fa-hand-point-right"></i><span>点我下载补丁</span></a><hr><h2 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3.解压</h2><blockquote><p>下载之后进行解压，会看到如下一个目录（建议将整个目录移动到一个稳定的地方，不会被误删的）<mark class="hl-label blue">不要放在有中文的目录下</mark> </p></blockquote><p><img src="./img/idea/pojie/03.png" alt="03"></p><blockquote><p><code>ja-netfilter.jar</code> <mark class="hl-label blue">这个文件后面激活破解IDEA的时候要用到，注意一下</mark> </p></blockquote><hr><h2 id="4-开始破解"><a href="#4-开始破解" class="headerlink" title="4. 开始破解"></a>4. 开始破解</h2><h3 id="激活之前需要先进入到IDEA中"><a href="#激活之前需要先进入到IDEA中" class="headerlink" title="激活之前需要先进入到IDEA中"></a>激活之前需要先进入到IDEA中</h3><blockquote><p>很多小伙伴说新版的已经没有试用30天了，其实只要注册个账号登录授权一下，IDEA就会送你30天的试用时间</p><p>有些小伙伴可能之前已经试用了30天，进不去IDEA了，没关系 后面会给出解决办法<br>选择 <mark class="hl-label red">`Start trial`</mark> 然后点击<code>Log In to JetBrains Account</code></p><p><img src="./img/idea/pojie/image-20220310092151939.png" alt="image-20220310092151939"></p><p>这个时候会自动打开你的浏览器，你只需要登录你的账号（没有的话可以去注册，或者使用GitHub、GitLab、Google账号登录）</p></blockquote><h3 id="登录之后，会提示授权成功"><a href="#登录之后，会提示授权成功" class="headerlink" title="登录之后，会提示授权成功"></a>登录之后，会提示授权成功</h3><p><img src="https://pic.imgdb.cn/item/61d5aed52ab3f51d918c2df8.jpg" alt="img"></p><blockquote><p>之后，回到IDEA界面中，点击下图中标注的<code>Start Trial</code>，然后就可以免费试用30天了。</p><p><img src="./img/idea/pojie/61d5aed52ab3f51d918c2df8.jpg" alt="image-20220310092419734"></p><p>然后随便创建一个项目，进入到IDEA界面中，点击菜单栏中的<code>Help</code>，然后点击<code>Edit Custom VM Options</code><br>然后在打开的 vmoptions 文件中进行配置</p><p><img src="./img/idea/pojie/image-20220309222921ss898.png" alt="image-20220309222921ss898"></p><h2 id="配置IDEA激活破解补丁-gt-gt-gt-gt-重要"><a href="#配置IDEA激活破解补丁-gt-gt-gt-gt-重要" class="headerlink" title="配置IDEA激活破解补丁&gt;&gt;&gt;&gt;重要"></a>配置IDEA激活破解补丁&gt;&gt;&gt;&gt;重要</h2><p>在上面打开的文件中，配置下载的补丁文件中的 <code>ja-netfilter</code> 路径<br>语法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja-netfilter:[ja-netfilter.jar路径]</span><br></pre></td></tr></table></figure><p>举个例子:比如我解压到了E盘，如下图所示</p><p><img src="./img/idea/pojie/image-20220310093046362.png" alt="image-20220310093046362"></p><p>那我配置的内容就应该是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="attr">javaagent</span>:<span class="attr">E</span>:\<span class="title class_">Program</span> <span class="title class_">Files</span>\<span class="title class_">JetBrains</span>\ja-netfilter\\ja-netfilter.<span class="property">jar</span></span><br></pre></td></tr></table></figure><p><img src="./img/idea/pojie/image-20220310093432046.png" alt="image-20220310093432046"></p><p>配置完之后保存（ctrl + s） ，关闭IDEA（重启），再次打开IDEA</p><p>打开之后我们在检查一下是否激活成功:</p><p><img src="./img/idea/pojie/image-20220310093624328.png" alt="image-20220310093624328"></p><p>可以看到我已经激活到了9万年,也不知道我能不能活这么久</p><p>总结一句话:用到死….</p><p>最后我们在看一下,有没有Spring config:</p><p><img src="./img/idea/pojie/image-20220309222921898.png" alt="image-20220309222921898"></p><p>好像还多了很多东西呢哈哈哈~</p></blockquote><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h2><p>从上面可以看到我激活到了9万年？ Licensed的名字为NoBug，其实这个都可以自定义的。<br>大家直接打开下载的IDEA激活补丁中的<code>janf_config.txt</code> 在里面修改就可以啦</p><p>最后，祝大家都可以成功的激活IDEA!</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 软件合集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记--[持续更新中]</title>
      <link href="/post/7fd48667.html"/>
      <url>/post/7fd48667.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h2><hr><h3 id="1-MyBatis历史"><a href="#1-MyBatis历史" class="headerlink" title="1. MyBatis历史"></a>1. MyBatis历史</h3><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁 移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于 2013年11月迁移到Github。 </p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架 包括SQL Maps和Data Access Objects（DAO）。 </p><hr><h3 id="2-MyBatis特性"><a href="#2-MyBatis特性" class="headerlink" title="2. MyBatis特性"></a>2. MyBatis特性</h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架 </p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集 </p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录 </p><p>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><hr><h3 id="3-MyBatis下载"><a href="#3-MyBatis下载" class="headerlink" title="3. MyBatis下载"></a>3. MyBatis下载</h3><blockquote><a class="btn-beautify outline blue larger" href="https://github.com/mybatis/mybatis-3"   title="点我下载"><i class="far fa-hand-point-right"></i><span>点我下载</span></a></blockquote><hr><h3 id="4-和其它持久化层技术对比"><a href="#4-和其它持久化层技术对比" class="headerlink" title="4. 和其它持久化层技术对比"></a>4. 和其它持久化层技术对比</h3><ul><li>JDBC <ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤 </li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见 </li><li>代码冗长，开发效率低 </li></ul></li><li>Hibernate 和 JPA <ul><li>操作简便，开发效率高 </li><li>程序中的长难复杂 SQL 需要绕过框架 </li><li>内部自动生产的 SQL，不容易做特殊优化 </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难 </li><li>反射操作太多，导致数据库性能下降 </li></ul></li><li>MyBatis <ul><li>轻量级，性能出色 </li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据 </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><hr><h2 id="二、搭建MyBatis"><a href="#二、搭建MyBatis" class="headerlink" title="二、搭建MyBatis"></a>二、搭建MyBatis</h2><h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h3><blockquote><p>IDE：idea 2019.2 </p><p>构建工具：maven 3.5.4</p><p>MySQL版本：MySQL 5.7 </p><p>MyBatis版本：MyBatis 3.5.7 </p></blockquote><hr><h3 id="2-创建maven工程"><a href="#2-创建maven工程" class="headerlink" title="2. 创建maven工程"></a>2. 创建maven工程</h3><p>​    a&gt;打包方式：jar </p><p>​    b&gt;引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>将来整合Spring 之后,这个配置文件可以省略，所以大家操作时可以直接复制、粘贴, 核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息 </span><br></pre></td></tr></table></figure><hr><h3 id="3-创建MyBatis的核心配置文件"><a href="#3-创建MyBatis的核心配置文件" class="headerlink" title="3. 创建MyBatis的核心配置文件"></a>3. 创建MyBatis的核心配置文件</h3><mark class="hl-label default">习惯上命名为mybatis-config.xml,这个文件名仅仅只是建议,并非强制要求。将来整合Spring之后,这个配置文件可以省略,所以大家操作时可以直接复制\粘贴,核心配置文件用于配置链接数据库的环境以及Mybatis的全局配置信息</mark> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="4、创建mapper接口"><a href="#4、创建mapper接口" class="headerlink" title="4、创建mapper接口"></a>4、创建mapper接口</h3><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要 提供实现类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加用户信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5、创建MyBatis的映射文件"><a href="#5、创建MyBatis的映射文件" class="headerlink" title="5、创建MyBatis的映射文件"></a>5、创建MyBatis的映射文件</h3><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。 </p><ol><li>对象：Java的实体类对象 </li><li>关系：关系型数据库 </li><li>映射：二者之间的对应关系</li></ol><div class="table-container"><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table></div><blockquote><p>1、映射文件的命名规则： 表所对应的实体类的类名+Mapper.xml 例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml 因此一个映射文件对应一个实体类，对应一张表的操作 MyBatis映射文件用于编写SQL，访问以及操作表中的数据 MyBatis映射文件存放的位置是src/main/resources/mappers目录下 </p><p>2、MyBatis中可以面向接口操作数据，要保证两个一致： a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致 b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="6、通过junit测试功能"><a href="#6、通过junit测试功能" class="headerlink" title="6、通过junit测试功能"></a>6、通过junit测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure><blockquote><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的 会话） </li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。 </li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的 相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul></blockquote><hr><h3 id="7、加入log4j日志功能"><a href="#7、加入log4j日志功能" class="headerlink" title="7、加入log4j日志功能"></a>7、加入log4j日志功能</h3><h4 id="a-gt-加入依赖"><a href="#a-gt-加入依赖" class="headerlink" title="a&gt;加入依赖"></a>a&gt;加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-加入log4j的配置文件"><a href="#b-gt-加入log4j的配置文件" class="headerlink" title="b&gt;加入log4j的配置文件"></a>b&gt;加入log4j的配置文件</h4><blockquote><mark class="hl-label default">log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</mark> </blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h3><mark class="hl-label 从左到右打印的内容越来越详细">FATAL(致命)>ERROR(错误)>WARN(警告)>INFO(信息)>DEBUG(调试)</mark> </blockquote><hr><h2 id="三、核心配置文件详解"><a href="#三、核心配置文件详解" class="headerlink" title="三、核心配置文件详解"></a>三、核心配置文件详解</h2><blockquote><p>核心配置文件中的标签必须按照固定的顺序：</p><p>==properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorF actory?,plugins?,environments?,databaseIdProvider?,mappers?==</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">    alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即类名且不区分大小</span></span><br><span class="line"><span class="comment">    写</span></span><br><span class="line"><span class="comment">    若设置此属性，此时该类型的别名只能使用alias所设置的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;abc&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，</span></span><br><span class="line"><span class="comment">    表示默认使用的环境</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">    type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">    type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    dataSource：设置数据源</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">    type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从</span></span><br><span class="line"><span class="comment">    缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">    type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">    type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、MyBatis的增删改查"><a href="#四、MyBatis的增删改查" class="headerlink" title="四、MyBatis的增删改查"></a>四、MyBatis的增删改查</h2><h3 id="1、添加"><a href="#1、添加" class="headerlink" title="1、添加"></a>1、添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id = 7</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、修改"><a href="#3、修改" class="headerlink" title="3、修改"></a>3、修改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6</span><br><span class="line">&lt;/update</span><br></pre></td></tr></table></figure><h3 id="4、查询一个实体类对象"><a href="#4、查询一个实体类对象" class="headerlink" title="4、查询一个实体类对象"></a>4、查询一个实体类对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、查询集合"><a href="#5、查询集合" class="headerlink" title="5、查询集合"></a>5、查询集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： </p><p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系 </p><blockquote><p>resultType：自动映射，用于属性名和表中字段名一致的情况 </p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况 </p></blockquote><p>2、当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常 TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p></blockquote><hr><h2 id="五、MyBatis获取参数值的两种方式（重点）"><a href="#五、MyBatis获取参数值的两种方式（重点）" class="headerlink" title="五、MyBatis获取参数值的两种方式（重点）"></a>五、MyBatis获取参数值的两种方式（重点）</h2><blockquote><p>MyBatis获取参数值的两种方式：${}和#{} </p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值 </p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引 号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自 动添加单引号</p></blockquote><h3 id="1、单个字面量类型的参数"><a href="#1、单个字面量类型的参数" class="headerlink" title="1、单个字面量类型的参数"></a>1、单个字面量类型的参数</h3><blockquote><p>若mapper接口中的方法参数为单个的字面量类型 此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p></blockquote><h3 id="2、多个字面量类型的参数"><a href="#2、多个字面量类型的参数" class="headerlink" title="2、多个字面量类型的参数"></a>2、多个字面量类型的参数</h3><blockquote><p>若mapper接口中的方法参数为多个时 此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的 值，注意${}需要手动加单引号</p></blockquote><h3 id="3、map集合类型的参数"><a href="#3、map集合类型的参数" class="headerlink" title="3、map集合类型的参数"></a>3、map集合类型的参数</h3><blockquote><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中 只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号 </p></blockquote><h3 id="4、实体类类型的参数"><a href="#4、实体类类型的参数" class="headerlink" title="4、实体类类型的参数"></a>4、实体类类型的参数</h3><blockquote><p>若mapper接口中的方法参数为实体类对象时 此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p></blockquote><h3 id="5、使用-Param标识参数"><a href="#5、使用-Param标识参数" class="headerlink" title="5、使用@Param标识参数"></a>5、使用@Param标识参数</h3><blockquote><p>可以通过@Param注解标识mapper接口中的方法参数 </p><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值， 注意${}需要手动加单引号</p></blockquote><h2 id="六、MyBatis的各种查询功能"><a href="#六、MyBatis的各种查询功能" class="headerlink" title="六、MyBatis的各种查询功能"></a>六、MyBatis的各种查询功能</h2><h3 id="1、查询一个实体类对象"><a href="#1、查询一个实体类对象" class="headerlink" title="1、查询一个实体类对象"></a>1、查询一个实体类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、查询一个list集合"><a href="#2、查询一个list集合" class="headerlink" title="2、查询一个list集合"></a>2、查询一个list集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、查询单个数据"><a href="#3、查询单个数据" class="headerlink" title="3、查询单个数据"></a>3、查询单个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如：java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如：int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如：Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、查询一条数据为map集合"><a href="#4、查询一条数据为map集合" class="headerlink" title="4、查询一条数据为map集合"></a>4、查询一条数据为map集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、查询多条数据为map集合"><a href="#5、查询多条数据为map集合" class="headerlink" title="5、查询多条数据为map集合"></a>5、查询多条数据为map集合</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 查询所有用户信息为map集合</span><br><span class="line">* @return</span><br><span class="line">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span><br><span class="line">时可以将这些map放在一个list集合中获取</span><br><span class="line">*/</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; getAllUserToMap();</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">结果：</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、特殊SQL的执行"><a href="#七、特殊SQL的执行" class="headerlink" title="七、特殊SQL的执行"></a>七、特殊SQL的执行</h2><h3 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br><span class="line">&lt;!--List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;testMohu&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">&lt;!--select * from t_user where username like <span class="string">&#x27;%$&#123;mohu&#125;%&#x27;</span>--&gt;</span><br><span class="line">&lt;!--select * from t_user where username like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;mohu&#125;,<span class="string">&#x27;%&#x27;</span>)</span>--&gt;</span><br><span class="line">select * from t_user where username like <span class="string">&quot;%&quot;</span>#&#123;mohu&#125;<span class="string">&quot;%&quot;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、批量删除"><a href="#2、批量删除" class="headerlink" title="2、批量删除"></a>2、批量删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 批量删除</span><br><span class="line">* @param ids</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">int deleteMore(@Param(&quot;ids&quot;) String ids);</span><br><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、动态设置表名"><a href="#3、动态设置表名" class="headerlink" title="3、动态设置表名"></a>3、动态设置表名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、添加功能获取自增的主键"><a href="#4、添加功能获取自增的主键" class="headerlink" title="4、添加功能获取自增的主键"></a>4、添加功能获取自增的主键</h3><blockquote><p>t_clazz(clazz_id,clazz_name) </p><p>t_student(student_id,student_name,clazz_id) </p><p>1、添加班级信息 </p><p>2、获取新添加的班级的id </p><p>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参</span></span><br><span class="line"><span class="comment">数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、自定义映射resultMap"><a href="#八、自定义映射resultMap" class="headerlink" title="八、自定义映射resultMap"></a>八、自定义映射resultMap</h2><h3 id="1、resultMap处理字段和属性的映射关系"><a href="#1、resultMap处理字段和属性的映射关系" class="headerlink" title="1、resultMap处理字段和属性的映射关系"></a>1、resultMap处理字段和属性的映射关系</h3><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">resultMap：设置自定义映射</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：表示自定义映射的唯一标识</span></span><br><span class="line"><span class="comment">type：查询的数据要映射的实体类的类型</span></span><br><span class="line"><span class="comment">子标签：</span></span><br><span class="line"><span class="comment">id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">collection：设置一对多的映射关系</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">property：设置映射关系中实体类中的属性名</span></span><br><span class="line"><span class="comment">column：设置映射关系中表中的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">select id,user_name,password,age,sex from t_user where user_name like</span><br><span class="line">concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用<em>），实体类中的属性 名符合Java的规则（使用驼峰） </em></p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系 </p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可 以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为 userName</p></blockquote><h3 id="2、多对一映射处理"><a href="#2、多对一映射处理" class="headerlink" title="2、多对一映射处理"></a>2、多对一映射处理</h3><blockquote><p>查询员工信息以及员工所对应的部门信息 </p></blockquote><h4 id="a-gt-级联方式处理映射关系"><a href="#a-gt-级联方式处理映射关系" class="headerlink" title="a&gt;级联方式处理映射关系"></a>a&gt;级联方式处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-使用association处理映射关系"><a href="#b-gt-使用association处理映射关系" class="headerlink" title="b&gt;使用association处理映射关系"></a>b&gt;使用association处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="c-gt-分步查询"><a href="#c-gt-分步查询" class="headerlink" title="c&gt;分步查询"></a>c&gt;分步查询</h4><h5 id="1）查询员工信息"><a href="#1）查询员工信息" class="headerlink" title="1）查询员工信息"></a>1）查询员工信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> eid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Emp <span class="title function_">getEmpByStep</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> <span class="type">int</span> eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptStepMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span></span><br><span class="line"><span class="comment">column：将sql以及查询结果中的某个字段设置为分步查询的条件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpByStep(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptStepMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2）根据员工所对应的部门id查询部门信息"><a href="#2）根据员工所对应的部门id查询部门信息" class="headerlink" title="2）根据员工所对应的部门id查询部门信息"></a>2）根据员工所对应的部门id查询部门信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询的第二步：根据员工所对应的did查询部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getEmpDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getEmpDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpDeptByStep&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、一对多映射处理"><a href="#3、一对多映射处理" class="headerlink" title="3、一对多映射处理"></a>3、一对多映射处理</h3><h4 id="a-gt-collection"><a href="#a-gt-collection" class="headerlink" title="a&gt;collection"></a>a&gt;collection</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据部门id查新部门以及部门中的员工信息</span><br><span class="line">* @param did</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">ofType：设置collection标签所处理的集合属性中存储数据的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptEmpByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpMap&quot;</span>&gt;</span></span><br><span class="line">select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did =</span><br><span class="line">emp.did where dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="b-gt-分步查询"><a href="#b-gt-分步查询" class="headerlink" title="b&gt;分步查询"></a>b&gt;分步查询</h4><h5 id="1）查询部门信息"><a href="#1）查询部门信息" class="headerlink" title="1）查询部门信息"></a>1）查询部门信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 分步查询部门和部门中的员工</span><br><span class="line">* @param did</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">Dept getDeptByStep(@Param(&quot;did&quot;) int did);</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpStep&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2）根据部门id查询部门中的所有员工"><a href="#2）根据部门id查询部门中的所有员工" class="headerlink" title="2）根据部门id查询部门中的所有员工"></a>2）根据部门id查询部门中的所有员工</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据部门id查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpListByDid</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息： </p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载 </p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个 属性会按需加载 此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和 collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=”lazy(延迟加 载)|eager(立即加载)”</p></blockquote><h2 id="九、动态SQL"><a href="#九、动态SQL" class="headerlink" title="九、动态SQL"></a>九、动态SQL</h2><blockquote><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决 拼接SQL语句字符串时的痛点问题。</p></blockquote><h3 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h3><blockquote><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中 的内容不会执行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByMoreTJ(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">and ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>where和if一般结合使用： </p><p>a&gt;若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字 </p><p>b&gt;若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉 </p><p>注意：where标签不能去掉条件最后多余的and</p></blockquote><h3 id="3、trim"><a href="#3、trim" class="headerlink" title="3、trim"></a>3、trim</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">    sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>trim用于去掉或添加标签中的内容 </p><p>常用属性： </p><p>prefix：在trim标签中的内容的前面添加某些内容 </p><p>prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 </p><p>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p></blockquote><h3 id="4、choose、when、otherwise"><a href="#4、choose、when、otherwise" class="headerlink" title="4、choose、when、otherwise"></a>4、choose、when、otherwise</h3><p>choose、when、otherwise相当于if…else if..else</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByChoose(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != &#x27;&#x27; and email != null&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、foreach"><a href="#5、foreach" class="headerlink" title="5、foreach"></a>5、foreach</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>属性： </p><p>collection：设置要循环的数组或集合 </p><p>item：表示集合或数组中的每一个数据 </p><p>separator：设置循环体之间的分隔符 </p><p>open：设置foreach标签中的内容的开始符 </p><p>close：设置foreach标签中的内容的结束符</p></blockquote><h3 id="6、SQL片段"><a href="#6、SQL片段" class="headerlink" title="6、SQL片段"></a>6、SQL片段</h3><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">eid,ename,age,sex,did</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><h2 id="十、MyBatis的缓存"><a href="#十、MyBatis的缓存" class="headerlink" title="十、MyBatis的缓存"></a>十、MyBatis的缓存</h2><h3 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h3><blockquote><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 </p><p>使一级缓存失效的四种情况： </p><p>1) 不同的SqlSession对应不同的一级缓存<br>2) 同一个SqlSession但是查询条件不同<br>3) 同一个SqlSession两次查询期间执行了任何一次增删改操作<br>4) 同一个SqlSession两次查询期间手动清空了缓存</p></blockquote><h3 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h3><blockquote><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 </p><p>二级缓存开启的条件：</p><p>a&gt;在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置 </p><p>b&gt;在映射文件中设置标签</p><p>c&gt;二级缓存必须在SqlSession关闭或提交之后有效 </p><p>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口 </p><p>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p></blockquote><h3 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h3><blockquote><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ol><li>eviction属性：缓存回收策略 LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 默认的是 LRU。</li><li>flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li><li>size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li><li>readOnly属性：只读，true/false <ol><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li></ol></li></ol></blockquote><h3 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h3><ol><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 </li><li>如果二级缓存没有命中，再查询一级缓存 </li><li>如果一级缓存也没有命中，则查询数据库 </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ol><h3 id="整合第三方缓存EHCache"><a href="#整合第三方缓存EHCache" class="headerlink" title="整合第三方缓存EHCache"></a>整合第三方缓存EHCache</h3><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>各jar包功能</li></ul><div class="table-container"><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table></div><ul><li>创建EHCache的配置文件ehcache.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 磁盘保存路径 --&gt;</span><br><span class="line">&lt;diskStore path=&quot;D:\atguigu\ehcache&quot;/&gt;</span><br><span class="line">&lt;defaultCache</span><br><span class="line">maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">maxElementsOnDisk=&quot;10000000&quot;</span><br><span class="line">eternal=&quot;false&quot;</span><br><span class="line">overflowToDisk=&quot;true&quot;</span><br><span class="line">timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line">&lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><ul><li>设置二级缓存的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加入logback日志</li></ul><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 创建logback的配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 -</span></span><br><span class="line"><span class="comment">-&gt;</span></span><br><span class="line"><span class="comment">&lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]</span></span><br><span class="line"><span class="comment">[%msg]%n&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/encoder&gt;</span></span><br><span class="line"><span class="comment">&lt;/appender&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">&lt;/configuration</span><br></pre></td></tr></table></figure><ul><li>EHCache配置文件说明</li></ul><div class="table-container"><table><thead><tr><th>属性名</th><th>是 否 必 须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无 穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为 true，则缓存的数据始终有效， 如果为false那么还 要根据timeToIdleSeconds、timeToLiveSeconds 判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element 缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超 过timeToIdleSeconds的属性取值时， 这些数据便 会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是 30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数 据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每 个120s， 相应的线程会进行一次EhCache中数据的 清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时 候， 移除缓存中element的策略。 默认是LRU（最 近最少使用），可选的有LFU（最不常使用）和 FIFO（先进先出）</td></tr></tbody></table></div><h2 id="十一、MyBatis的逆向工程"><a href="#十一、MyBatis的逆向工程" class="headerlink" title="十一、MyBatis的逆向工程"></a>十一、MyBatis的逆向工程</h2><ul><li><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程 的。</p></li><li><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源： </p><ul><li>Java实体类 </li><li>Mapper接口 </li><li>Mapper映射文件</li></ul></li></ul><h3 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h3><h4 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h4><h4 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h4><blockquote><p>文件名必须是：generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h4><p><img src="https://lc-gluttony.s3.amazonaws.com/aLy6jTEsBgHJ/nvgz4dicqzr3J37ESAxnSLhKfv2NHMFt/QQ%E6%88%AA%E5%9B%BE20220309154235.png" alt="Mybatis"></p><h3 id="QBC查询"><a href="#QBC查询" class="headerlink" title="QBC查询"></a>QBC查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>().build(is).openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">EmpExample</span> <span class="variable">empExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line"><span class="comment">//创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</span></span><br><span class="line">empExample.createCriteria().andEnameLike(<span class="string">&quot;a&quot;</span>).andAgeGreaterThan(<span class="number">20</span>).andDidIsNot</span><br><span class="line"><span class="title function_">Null</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//将之前添加的条件通过or拼接其他条件</span></span><br><span class="line">empExample.or().andSexEqualTo(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">List&lt;Emp&gt; list = mapper.selectByExample(empExample);</span><br><span class="line"><span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bufferfly主题--文档修改</title>
      <link href="/post/d811784c.html"/>
      <url>/post/d811784c.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0ca7324a11ddc7f0153ed2b048b789a390558df5ba4e48cfd463214ac94bca87"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> bufferfly修改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bufferfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/post/b3b6ba72.html"/>
      <url>/post/b3b6ba72.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><ul><li>Spring:春天—-&gt;给软件行业带来了春天!</li><li>2002,首次推出了Spring框架的雄性:interface21框架!</li><li>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版</li><li>Rod Johnson Spring Framework创始人，著名作者，很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学</li><li>Spring理念：使现有的技术更加容易使用，本事是一个大杂烩，整合了现有的技术框架</li><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMVC + Spring + Mybatis</li></ul><blockquote><p>官网：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring Framework 5.3.12 API：<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/">https://docs.spring.io/spring-framework/docs/current/javadoc-api/</a></p><p>Version 5.3.12：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</a></p><p>官方下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h4><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个轻量级的、非入侵式的框架！</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架的整合的支持</li></ul><p> <strong>==总结：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！==</strong></p><h4 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage1.bubuko.com%2Finfo%2F202007%2F20200710143347205636.png&refer=http%3A%2F%2Fimage1.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638027623&t=c284620445aa14250fc677ec14eebed7" alt="img" style="zoom: 80%;" /></p><h4 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h4><p>在Spring的官网有这个介绍：现代化的Java开发！也就是基于Spring的开发</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage1.bubuko.com%2Finfo%2F202004%2F20200402092531603379.png&refer=http%3A%2F%2Fimage1.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638027821&t=a4d423dd8e882c9fe6336a6ee832b6ab" alt="img" style="zoom:150%;" /></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用</p><p>弊端：发展了太久之后，违背了原来的理念，配置十分繁琐，人称：“配置地狱”</p><h3 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h3><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserService业务实现类</li></ol><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，因为我们需要根据用户的需求修改源代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p>我们使用一个Set接口实现，已经发生了革命性的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用set进行动态实现值的注入</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>之前，程序是主动创建对象！控制权在程序猿手上！</li><li>使用了Set注入后，程序不再具有主动性，而是变成了被动的接受对象！</li></ul><p>这种思想，从本质上解决了问题，我们程序员不用在去管理对象的创建了。系统的耦合性大大降低！可以更加专注这种在业务实现上！这是IOC的原型</p><h4 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h4><p><strong>控制反转IOC(Inversion of Control),是一种设计思想,ID(依赖注入)是实现IOC的一种方法</strong></p><p><strong>控制反转是一种通过描述(XML或注解)并通过第三方去生产获取特定对象的方式,在Spring中实现控制反转的是IOC容器,其实方法是依赖注入</strong></p><h4 id="3-HelloSpring"><a href="#3-HelloSpring" class="headerlink" title="3.HelloSpring"></a>3.HelloSpring</h4><p>控制:传统应用程序的对象是有程序本身控制创建的,使用Spring后,对象是由Spring来创建的</p><p>反转:程序本身不创建对象,而变成被动的接受对手</p><p>依赖注入:就是利Set方法来实现注入的</p><p>IOC是一中编程思想,由主动的编程变成被动的接受</p><h4 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4.IOC创建对象的方式"></a>4.IOC创建对象的方式</h4><ol><li><h5 id="下标赋值"><a href="#下标赋值" class="headerlink" title="下标赋值"></a>下标赋值</h5></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    有参构造 1.下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hgm.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黄帅哥&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="类型赋值"><a href="#类型赋值" class="headerlink" title="类型赋值"></a>类型赋值</h5></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--    有参构造 2.通过类型创建,不建议使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hgm.pojo.User&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span><span class="attr">value</span>=<span class="string">&quot;黄帅哥&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>参数名</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--   3.直接通过参数名来设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hgm.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黄帅哥&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：在配置文件加载的过程中，容器中管理的对象就已经初始化了</p><h4 id="5-Spring依赖注入"><a href="#5-Spring依赖注入" class="headerlink" title="5.Spring依赖注入"></a>5.Spring依赖注入</h4><h5 id="5-1别名"><a href="#5-1别名" class="headerlink" title="5.1别名"></a>5.1别名</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    别名,如果添加了别名,可以通过别名调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;abc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-2Bean配置"><a href="#5-2Bean配置" class="headerlink" title="5.2Bean配置"></a>5.2Bean配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id:bean的唯一标识符,也就是对象名</span></span><br><span class="line"><span class="comment">    class:bean对象所对应的全限定名:包名+类型</span></span><br><span class="line"><span class="comment">    name:也是别名,而且name可以取多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hgm.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u2,user2 u3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黄帅逼&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-3import"><a href="#5-3import" class="headerlink" title="5.3import"></a>5.3import</h5><p>这个import，一般用于团队开发使用，他可以将多个配置文件，导入合并为一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6.依赖注入"></a>6.依赖注入</h4><h4 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7.Bean的自动装配"></a>7.Bean的自动装配</h4><h5 id="7-1测试"><a href="#7-1测试" class="headerlink" title="7.1测试"></a>7.1测试</h5><h5 id="7-2ByName自动装配"><a href="#7-2ByName自动装配" class="headerlink" title="7.2ByName自动装配"></a>7.2ByName自动装配</h5><h5 id="7-3ByType自动装配"><a href="#7-3ByType自动装配" class="headerlink" title="7.3ByType自动装配"></a>7.3ByType自动装配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;    &lt;bean id=<span class="string">&quot;cat&quot;</span> class=<span class="string">&quot;com.hgm.pojo.Cat&quot;</span>/&gt;    &lt;bean id=<span class="string">&quot;dog&quot;</span> class=<span class="string">&quot;com.hgm.pojo.Dog&quot;</span>/&gt;    &lt;!--       Bean自动装配           byName:会自动在容器上下文中查找,和自己对象set方法后面的值对应的bean id,               需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致           byType:会自动在容器上下文中查找,和自己对象属性相同的bean,               需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型值一致   --&gt;    &lt;bean id=<span class="string">&quot;people&quot;</span> class=<span class="string">&quot;com.hgm.pojo.People&quot;</span>&gt;        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;黄帅哥&quot;</span>/&gt;    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    小结:    </p><ul><li><h6 id="byname的时候-需要保证所有bean的id唯一-并且这个bean需要和自动注入的属性的set方法的值一致"><a href="#byname的时候-需要保证所有bean的id唯一-并且这个bean需要和自动注入的属性的set方法的值一致" class="headerlink" title="byname的时候,需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致"></a>byname的时候,需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致</h6><ul><li><h6 id="ByType的时候-需要保证所有bean的class唯一-并且这个bean需要和自动注入的属性的类型值一致"><a href="#ByType的时候-需要保证所有bean的class唯一-并且这个bean需要和自动注入的属性的类型值一致" class="headerlink" title="ByType的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型值一致"></a>ByType的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型值一致</h6></li></ul></li></ul><h5 id="7-4-使用注解实现自动装配"><a href="#7-4-使用注解实现自动装配" class="headerlink" title="7.4 使用注解实现自动装配"></a>7.4 使用注解实现自动装配</h5><p>jdk1.5支持的注解,Spring2.5就支持注解了!</p><p>要使用注解须知:</p><pre><code> 1. 导入约束     context约束2. ==配置注解的支持  &lt;context:annotation-config/&gt;==</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@Auotwired</strong></p><p>直接在属性上使用即可! 也可以在set方式上使用</p><p>使用Auotwired我们可以不用编写Set方法了,前提是你这个自动导入装配的属性在IOC (Spring) 容器中存在,且符合名字Byname</p><p><strong>科普:    @Nullable字段标记了这个注解,说明这个字段可以为null</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;    <span class="comment">// 如果显示定义了Auotwired的required属性为false,说明这个对象可以为null,否则不允许为空    @Autowired(required = false)    private Cat cat;    @Autowired    private Dog dog;    private String name;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>@Autowired和@Qualifier(value = “xx”)配合使用</strong></p><p>如果@Autowired自动装配的环境比较复杂,自动装配无法通过一个注解[@Autowired]完成的时候,我们可以使用@Qualifier(value = “xx”)去配置@Autowired的使用,指定一个唯一的bean对象注入!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;    <span class="meta">@Autowired</span>    <span class="meta">@Qualifier(value = &quot;cat11&quot;)</span>    <span class="keyword">private</span> Cat cat;    <span class="meta">@Autowired</span>    <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span>    <span class="keyword">private</span> Dog dog;    <span class="keyword">private</span> String name;&#125;</span><br></pre></td></tr></table></figure><p><strong>@Resource注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;    <span class="meta">@Resource(name = &quot;cat2&quot;)</span>    <span class="keyword">private</span> Cat cat;    <span class="meta">@Resource</span>    <span class="keyword">private</span> Dog dog;     <span class="keyword">private</span> String name;&#125;</span><br></pre></td></tr></table></figure><p>小结:</p><p>​    @Resource和@Auotwired的区别:</p><ul><li>都是用来自动装配的,都可以放在属性字段上</li><li>@Auotwired 是通过Byname的方式实现,而且必须要求这个对象存在<strong>[常用]</strong></li><li>@Resource 默认是通过byname的方式实现,如果找不到名字,则通过byType实现,如果两个都找不到的情况下就报错!</li><li>执行顺序不同:@Auotwired 通过byType的方式实现.@Resource 默认是通过byname的方式实现,</li></ul><h3 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h3><p><strong>在spring4之后,要使用注解开发,必须保证aop的包导入了</strong></p><p><img src="C:\Users\江小白\AppData\Roaming\Typora\typora-user-images\image-20211028192022520.png" alt="image-20211028192022520" style="zoom:50%;" /></p><p><strong>使用注解需要导入context约束,增加注解的支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>注册bean Component代替了    </p></li><li><p>属性如何注入     <strong>@Value(“SerMs”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于    &lt;bean id=&quot;user&quot; class=&quot;com.hgm.pojo.User&quot;/&gt;      Component:组件@Componentpublic class User &#123;    public String name;    //相当于        &lt;property name=&quot;name&quot; value=&quot;SerMs&quot;/&gt;    @Value(&quot;SerMs&quot;)    public void setName(String name) &#123;        this.name = name;    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>衍生的注解<strong>（在类里面使用了注解就说明这个类被Spring托管了，也就是成为Spring的组件了）</strong></p><ol><li>@Component有几个衍生注解，我们在web开发中，会按照MVC三层架构分层！</li><li>dao层【@Repository】 （dao层我们都会用Repository来注解）</li><li>service层【@Service】（service层我们都会用Serivce来注解）</li><li>Controller层【@Controller】</li></ol><p>这四个功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p></li><li><p>自动装配</p><ul><li><p>@Auotwierd：自动装配通过类型、名字</p></li><li><p>如果Auotwierd不能唯一自动装配上属性，则需要通过@Qualifier(value=”xxx”)</p></li></ul><ul><li><p>@Nullable：字段标记了这个注解，说明这个字段可以为null</p></li><li><p>@Resource：自动装配通过名字，类型</p></li></ul></li><li><p>作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//注入 bean@Scope(&quot;singleton&quot;)     //singleton 单例模式,prototype原型模式  作用域public class User &#123;    public String name;    //相当于        &lt;property name=&quot;name&quot; value=&quot;SerMs&quot;/&gt;    @Value(&quot;SerMs&quot;)     //注入值 Value    public void setName(String name) &#123;        this.name = name;    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>小结</p><p>xml与注解：</p><ul><li>xml更加万能，使用宇任何场合，维护更加方便</li><li>注解 不是自己类使用不了，维护相对复杂！</li></ul><p>xml与注解最佳实践：</p><ul><li><p>xml用来管理bean</p></li><li><p>注解只负责属性的注入</p></li><li><p>我们在使用的过程中，只需要注意一个问题，必须让注解生效，就需要开启注解的支持</p></li><li><p>```xml</p><!--指定要扫描的包,这个包下的注解才会生效--><p><context:component-scan base-package="com.hgm"/></p><!--注解驱动--><p><context:annotation-config/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   ----</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">#### 注解说明</span><br><span class="line"></span><br><span class="line">- @Auotwierd：自动装配通过类型、名字</span><br><span class="line"></span><br><span class="line">  - 如果Auotwierd不能唯一自动装配上属性，则需要通过@Qualifier(value=&quot;xxx&quot;)</span><br><span class="line"></span><br><span class="line">- @Nullable：字段标记了这个注解，说明这个字段可以为null</span><br><span class="line"></span><br><span class="line">- @Resource：自动装配通过名字，类型</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- @Component：组件，放在类上，说明这个类被Spring管理了，就是bean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 9.使用Java的方式配置Spring</span><br><span class="line"></span><br><span class="line">我们现在要完全不使用Spring的xml配置了，全权交给Java来做</span><br><span class="line"></span><br><span class="line">JavaConfig是Spring的一个子项目，在Spring4之后他成为了一个核心功能</span><br><span class="line"></span><br><span class="line">![image-20211028202432188](C:\Users\江小白\AppData\Roaming\Typora\typora-user-images\image-20211028202432188.png)</span><br><span class="line"></span><br><span class="line">###### **实体类**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//这里这个注解的意思,就是说明这个类被Spring接管了,注册到了容器中@Controllerpublic class User &#123;    @Value(&quot;SerMs&quot;)     //属性注入值    private String name;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +                &#x27;&#125;&#x27;;    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hgm.pojo;<span class="keyword">import</span> org.springframework.context.annotation.Bean;<span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="keyword">import</span> org.springframework.context.annotation.Configuration;<span class="keyword">import</span> org.springframework.context.annotation.Import;<span class="comment">/** * <span class="doctag">@author</span> Ser_Ms * <span class="doctag">@version</span> 1.0 * <span class="doctag">@Date</span> 2021/10/28 20:20 */</span><span class="meta">@Configuration</span> <span class="comment">//这个也会Spring容器托管,注册到容器中,因为他本来就是一个Component// @Configuration代表这是一个配置类,就和我们之前看的bean.xml一样的@ComponentScan(&quot;com.hgm.pojo&quot;)@Import(MyCofig2.class)public class MyConfig &#123;   //注册一个Bean,就相当于我们之前写的一个bean标签,   //这个方法的名字就是相当于bean标签中的id属性,   //这个方法的返回值,就相当于bean标签中的class属性,   @Bean   public User getUser()&#123;      return  new User();     //就是返回要注入到bean的对象   &#125;&#125;</span></span><br></pre></td></tr></table></figure><h6 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a><strong>测试类</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest07</span> &#123;   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;       <span class="comment">//如果完全使用了配置类方式去做,我们就只能通过AnnotationConfig上下文来获取容器,通过配置类的class对象加载!     ApplicationContext context = new AnnotationConfigApplicationContext(MyConfig.class);      User getUser = context.getBean(&quot;getUser&quot;,User.class);      System.out.println(getUser.getName());   &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这种纯Java的配置方式，在SpringBoot中随处可见</p><hr><h3 id="10-代理模式（AOP）"><a href="#10-代理模式（AOP）" class="headerlink" title="10.代理模式（AOP）"></a>10.代理模式（AOP）</h3><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><h4 id="10-1静态代理"><a href="#10-1静态代理" class="headerlink" title="10.1静态代理"></a>10.1静态代理</h4><h5 id="角色分析："><a href="#角色分析：" class="headerlink" title="角色分析："></a>角色分析：</h5><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p>代码步骤：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房子public interface Rent &#123;   public void rent();&#125;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东public class Host implements Rent &#123;   </span></span><br><span class="line"><span class="meta">@Override</span>   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;      </span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子!&quot;</span>);   </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理public class Proxy implements Rent&#123;    private Host host;    public Proxy() &#123;    &#125;    public Proxy(Host host) &#123;        this.host = host;    &#125;    @Override    public void rent() &#123;        seeHouse();        host.rent();        hetong();        fare();    &#125;    //看房    public void seeHouse()&#123;        System.out.println(&quot;中介带你看房&quot;);    &#125;    //签合同    public void hetong()&#123;        System.out.println(&quot;签合同&quot;);    &#125;    //收中介费    public void fare()&#123;        System.out.println(&quot;收中介费&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="comment">//房东要租房子        Host host = new Host();        //代理,中介帮房东租房子,但是代理角色会加一些附属操作        Proxy proxy = new Proxy(host);        //你不用面对房东,直接找中介租房即可        proxy.rent();    &#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="代理模式的好处："><a href="#代理模式的好处：" class="headerlink" title="代理模式的好处："></a>代理模式的好处：</h5><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共业务</li><li>公共业务就交给了代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li></ul><h4 id="10-2-加深理解"><a href="#10-2-加深理解" class="headerlink" title="10.2 加深理解"></a>10.2 加深理解</h4><p><img src="C:\Users\江小白\AppData\Roaming\Typora\typora-user-images\image-20211029114103708.png" alt="image-20211029114103708"></p><h4 id="10-3动态代理"><a href="#10-3动态代理" class="headerlink" title="10.3动态代理"></a>10.3动态代理</h4><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的,不是我们直接写好的</li><li>动态代理分为两大类:基于接口的动态代理,基于类的动态代理<ul><li>基于接口—-JDK动态代理</li><li>基于类:cglib</li><li>java字节码实现 ： Javassist</li></ul></li></ul><p>需要了解两个类：Proxy，InvocationHandler</p><p><strong>InvocationHandler</strong></p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共也就交给代理角色！实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h2 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11.AOP"></a>11.AOP</h2><hr><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>AOP意为:面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，AOP是OOP的延续，是软件开发中的一个热点，也是String框架中的一个重要内容，是函数式编程的一种衍生范型，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率。</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语:"></a>术语:</h3><ol><li>Aspect:切面,表示增强的功能,就是一推代码,完成某一个功能,非业务功能,常见的切面功能有日志,事务,统计信息,参数检查,权限验证</li><li>JoinPoint:链接点,连接业务方法和切面的位置,就某类中的业务的方法</li><li>目标对象:给哪个类的方法增加功能,这个类就是目标对象</li></ol><h3 id="切面有关的三要素"><a href="#切面有关的三要素" class="headerlink" title="切面有关的三要素:"></a>切面有关的三要素:</h3><ol><li>切面的功能代码,切面干什么</li><li>切面的执行位置,使用Pointcut表示切面执行的位置</li><li>切面的执行时间,使用Advice表示时间,在目标方法之前,还是目标方法之后</li></ol><h3 id="Aop的实现"><a href="#Aop的实现" class="headerlink" title="Aop的实现"></a>Aop的实现</h3><p>aop是一个规范,是动态的一个规范化,一个标准</p><h3 id="aop的技术实现框架"><a href="#aop的技术实现框架" class="headerlink" title="aop的技术实现框架:"></a>aop的技术实现框架:</h3><ol><li>spring:Spring在内部实现了aop的规范,能做了aop的工作<ol><li>我们项目开发中很少使用Spring的aop实现,因为spring的aop比较笨重</li></ol></li><li>AspectJ:一个开源的专门处理Aop的框架,Spring框架中集成了aspectj框架,通过spring就能使用aspectj的功能<ol><li>使用xml的配置文件:配置全局事务</li><li>使用注解,我们在项目中要做aop功能,一般都用注解,aspectj有五个注解</li></ol></li></ol><h3 id="学习Aspectj框架的使用"><a href="#学习Aspectj框架的使用" class="headerlink" title="学习Aspectj框架的使用:"></a>学习Aspectj框架的使用:</h3><ol><li><p>切面的执行时间,这个执行时间在规范中叫做Advice(增强)</p><p>在aspectj框架中使用注解表示的,也可以使用xml配置文件中的标签</p><ol><li>@Before</li><li>@AfterReturning</li><li>@Around</li><li>@AfterThrowing</li><li>@After</li></ol></li><li><p>表示切面执行的位置,使用的是切入点表达式</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
